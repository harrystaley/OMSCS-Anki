{
    "__type__": "Deck",
    "children": [
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "11ad75fc-a760-11ed-8af1-a14d95925fac",
            "deck_config_uuid": "11ad78b8-a760-11ed-8af1-a14d95925fac",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [
                "540bb02910f64fd3a5d305062ac983ca-oa-1-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-1-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-10-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-10-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-11-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-11-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-12-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-12-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-13-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-13-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-14-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-14-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-15-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-15-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-16-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-16-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-17-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-17-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-18-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-18-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-19-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-19-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-2-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-2-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-20-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-20-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-21-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-21-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-3-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-3-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-4-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-4-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-5-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-5-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-6-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-6-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-7-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-7-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-8-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-8-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-9-A.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-9-Q.svg",
                "540bb02910f64fd3a5d305062ac983ca-oa-O.svg",
                "6zSCXW2xImcevCSfSy7zUn3XbGhuKHl2fnTJ6j4SmnSVrs24nVseWlHSaGedNRJ6rGJtovtDMdRdnpsG2AT6d5tAjJRZOHr-IFv_C8SuAE3Vcdt0L3j.png",
                "OXJU_PiXQ8ud3MCCBpmsr8o2bPCaNqEjIowfGsz7MzguZEOLG2eAtXLXGpECgLNtO5c22WXvxxjXZJUkEzLnAaoIpq9Rg97e8swPuZ4XaYWNhrr2wCY.png",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-1-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-1-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-10-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-10-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-11-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-11-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-12-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-12-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-13-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-13-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-14-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-14-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-15-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-15-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-16-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-16-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-2-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-2-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-3-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-3-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-4-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-4-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-5-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-5-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-6-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-6-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-7-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-7-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-8-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-8-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-9-A.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-9-Q.svg",
                "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg",
                "paste-17f75faa8f5819df80844121056ca1503726dafd.jpg",
                "paste-27e5ad70d0ee87058c016c89bdc9fb8be0ace77e.jpg",
                "paste-4cd125ed2523225424e18edda8e616ca2b3ef878.jpg",
                "paste-59868afdb92b9e036498455ae09c2aa16bced027.jpg",
                "paste-5cf7be958410c3700b9c5ca51016cd0cb020a07b.jpg",
                "paste-888e8fccd34d585b3b577c80afd3e8ce70d00bc5.jpg",
                "paste-aea946f1b8898c759f980cd94d31249b4af29d32.jpg",
                "paste-cba95b0ccad4cd508199f24a1c6d3f36f5745ca1.jpg",
                "paste-da46eec4c8cce71ece6e06ef3c2271da6b1142b6.jpg",
                "paste-eff2f16e5153efef548d03e4bcc00afb99c40406.jpg",
                "tmp_iwz_ej2.jpg",
                "tmppft9thz8.jpg"
            ],
            "name": "Lesson 1: Intro, History, and Internet Arch.",
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "What are advantages of a network layered architecture?",
                        "<b><ul><li><div><span style=\"font-weight: 400;\">Scalability</span></div></li><li><div><span style=\"font-weight: 400;\">Modularity</span></div></li><li><div><span style=\"font-weight: 400;\">Flexibility (add or delete components)</span></div></li></ul></b>",
                        ""
                    ],
                    "guid": "nl&NMtEV8(",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What are <b>disadvantages</b> of a network <b>layered architecture</b>?",
                        "<b><ul><li><div><span style=\"font-weight: 400;\"><i>Cross-layer dependencies</i> that violate the goal of layer separation</span></div></li><li><div><span style=\"font-weight: 400;\"><i>Duplicate functionality,</i> i.e. error correction/recovery&nbsp;</span></div></li><li><div><span style=\"font-weight: 400;\"><i>Increased overhead in computation and in message headers </i>caused by the abstraction barriers between layers</span></div></li></ul></b>",
                        ""
                    ],
                    "guid": "wL=kNhu8P|",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What are the <b>differences</b> between the OSI model and the five-layered Internet model?",
                        "OSI model has 7 layers and five-layered is five layers where the session and presentation layers are combined into the application layer",
                        ""
                    ],
                    "guid": "EpBw.ED:}K",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What are the <b>similarities</b> between the OSI model and the five-layered Internet model?",
                        "They both represent layered network architecture with a physical, data link, network, transport, and application layer.<br><br>and have the same advantages and disadvantages when it comes to utilize a layered architecture.<br><br><ul style=\"\"><li style=\"font-weight: bold;\"><div>Advantages</div></li><ul style=\"font-weight: bold;\"><li><div><span style=\"font-weight: 400;\">Scalability</span></div></li><li><div><span style=\"font-weight: 400;\">Modularity</span></div></li><li><div><span style=\"font-weight: 400;\">Flexibility (add or delete components)</span></div></li></ul><li style=\"font-weight: bold;\"><div>Disadvantages</div></li><ul style=\"font-weight: bold;\"><li><div><span style=\"font-weight: 400;\">Cross-layer dependencies that violate the goal of layer separation</span></div></li><li><div><span style=\"font-weight: 400;\">Duplicate functionality, i.e. error recovery&nbsp;</span></div></li><li><div><span style=\"font-weight: 400;\">Increased overhead in computation and in message headers caused by the abstraction barriers between layers</span></div></li></ul><li style=\"\"><b><span style=\"font-weight: 400;\"><img src=\"OXJU_PiXQ8ud3MCCBpmsr8o2bPCaNqEjIowfGsz7MzguZEOLG2eAtXLXGpECgLNtO5c22WXvxxjXZJUkEzLnAaoIpq9Rg97e8swPuZ4XaYWNhrr2wCY.png\"></span></b><br></li><li style=\"\"><b><span style=\"font-weight: 400;\"><b><span style=\"font-weight: 400;\"><img src=\"6zSCXW2xImcevCSfSy7zUn3XbGhuKHl2fnTJ6j4SmnSVrs24nVseWlHSaGedNRJ6rGJtovtDMdRdnpsG2AT6d5tAjJRZOHr-IFv_C8SuAE3Vcdt0L3j.png\"></span></b><br></span></b></li></ul>",
                        ""
                    ],
                    "guid": "o.5G.X])fv",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "{{c1::Sockets}}<b><span style=\"font-weight: 400;\">&nbsp;are the interface between the application and transport layers</span></b>",
                        ""
                    ],
                    "guid": "z+ti}K~=L@",
                    "note_model_uuid": "11adbb66-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What are the 7 layers in the OSI Model?",
                        "<b><span style=\"font-weight: 400;\"><img src=\"OXJU_PiXQ8ud3MCCBpmsr8o2bPCaNqEjIowfGsz7MzguZEOLG2eAtXLXGpECgLNtO5c22WXvxxjXZJUkEzLnAaoIpq9Rg97e8swPuZ4XaYWNhrr2wCY.png\"><br></span></b><br>\"Physical DataLink Network Transport Session Presentation Application\"",
                        ""
                    ],
                    "guid": "Rc3)&:(Mpm",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "How many layers are in the OSI Model",
                        "7",
                        ""
                    ],
                    "guid": "N$A%18OXmx",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-1",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-1-Q.svg\">",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-1-A.svg\">",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\">"
                    ],
                    "guid": "vmK9%jw2yX",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-2",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-2-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-2-A.svg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "zTG1??~#>_",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-3",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-3-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-3-A.svg\">",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "jgK+:_!;T(",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-4",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-4-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-4-A.svg\">",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "y3Z@@JLu3Q",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-5",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-5-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-5-A.svg\">",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "&t|8BBuz?",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-6",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-6-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-6-A.svg\">",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "qokA@2p/lB",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-7",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-7-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-7-A.svg\">",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "dtRRNX~z0?",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-8",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-8-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-8-A.svg\">",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "QZG9[pW1y?",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-9",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-9-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-9-A.svg\">",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "C!AfTZ+PW8",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-10",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-10-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-10-A.svg\">",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "Gkq]66=R:T",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-11",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-11-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-11-A.svg\">",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "zSQ&t=ANj%",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-12",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-12-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-12-A.svg\">",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "be_iuM(IIS",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-13",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-13-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-13-A.svg\">",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "iRw>PZvveF",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-14",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-14-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-14-A.svg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "g3}p]=)}H2",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-15",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-15-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-15-A.svg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "l,H~n=FgX~",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-16",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-16-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-16-A.svg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "K~kN3KlY-]",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-17",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\">",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-17-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-17-A.svg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "d=V$BJl@}@",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-18",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-18-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-18-A.svg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "FgY%xem:Rt",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-19",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-19-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-19-A.svg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "QFj^&qabSz",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-20",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-20-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-20-A.svg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "Qk*fXpX#y3",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "540bb02910f64fd3a5d305062ac983ca-oa-21",
                        "",
                        "<img src=\"tmp_iwz_ej2.jpg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-21-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-21-A.svg\" />",
                        "<img src=\"540bb02910f64fd3a5d305062ac983ca-oa-O.svg\" />"
                    ],
                    "guid": "e*UL},gh$]",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>Human computer interaction layer, where applications can access the network services.",
                        "Application Layer",
                        "y"
                    ],
                    "guid": "D@c@?bv!I{",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>Ensures the data is in a usable format and is where data encryption occurs.",
                        "Presentation Layer",
                        "y"
                    ],
                    "guid": "NF,5o`ZkwN",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>Maintains connections and is responsible for controlling ports and sessions",
                        "Session Layer",
                        "y"
                    ],
                    "guid": "DWlJM7lO/k",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>Transmits data using transmission protocols including TCP and UDP",
                        "Transport Layer",
                        "y"
                    ],
                    "guid": "wOk+r{RV;C",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>Decides which physical path the data will take.",
                        "Network Layer",
                        "y"
                    ],
                    "guid": "H8fH3],41>",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>Defines the format of data on the network",
                        "Data Link Layer",
                        "y"
                    ],
                    "guid": "z@LYO)u^ZG",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>Transmits raw bit stream over the physical medium",
                        "Physical Layer",
                        "y"
                    ],
                    "guid": "u<iKC<Typm",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>Which layer is responsible for moving datagrams from on internet host to another?",
                        "Network Layer",
                        ""
                    ],
                    "guid": "e@Ptr%7=~P",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>Which layer is responsible for end to end communication between hosts?",
                        "Transport Layer",
                        ""
                    ],
                    "guid": "oD6+^{l*SK",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>Which layer is responsible for moving frames from one node (host or router) to the next node.&nbsp;",
                        "Data Link Layer",
                        ""
                    ],
                    "guid": "FR`[}8.zV*",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br><b><span style=\"font-weight: 400;\">We refer to packets of information as frames in which layer?&nbsp;</span></b>",
                        "Data Link Layer",
                        ""
                    ],
                    "guid": "otYHU@X@U|",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br><b><span style=\"font-weight: 400;\">which layer</span></b><b><span style=\"font-weight: 400;\">&nbsp;facilitates the interaction with actual hardware.</span></b>",
                        "<b><span style=\"font-weight: 400;\">Physical layer</span></b>",
                        ""
                    ],
                    "guid": "jn@}@;)X(#",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<img src=\"paste-cba95b0ccad4cd508199f24a1c6d3f36f5745ca1.jpg\">",
                        "<img src=\"paste-59868afdb92b9e036498455ae09c2aa16bced027.jpg\">",
                        ""
                    ],
                    "guid": "re0_&mBt;!",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<img src=\"paste-5cf7be958410c3700b9c5ca51016cd0cb020a07b.jpg\">",
                        "<img src=\"paste-da46eec4c8cce71ece6e06ef3c2271da6b1142b6.jpg\" data-editor-shrink=\"true\">",
                        ""
                    ],
                    "guid": "Hh1=*hYgkb",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-1",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-1-Q.svg\">",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-1-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\">"
                    ],
                    "guid": "v]wgUoXDK*",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-2",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-2-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-2-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\" />"
                    ],
                    "guid": "sc~t&EUDBP",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-3",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-3-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-3-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\" />"
                    ],
                    "guid": "x<KTO_5;?v",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-4",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-4-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-4-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\" />"
                    ],
                    "guid": "yJlgj)Ot&y",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-5",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-5-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-5-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\" />"
                    ],
                    "guid": "A:|^BTE%[P",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-6",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-6-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-6-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\" />"
                    ],
                    "guid": "gxKMHN[ZI$",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-7",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-7-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-7-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\">"
                    ],
                    "guid": "ykWE],bz-X",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-8",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-8-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-8-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\" />"
                    ],
                    "guid": "t8M.V<Es}b",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-9",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-9-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-9-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\" />"
                    ],
                    "guid": "Aw.+?G5+hc",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-10",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-10-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-10-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\" />"
                    ],
                    "guid": "Ofz&dx!X_",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-11",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-11-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-11-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\" />"
                    ],
                    "guid": "jQoy2o%F]%",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-12",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-12-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-12-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\" />"
                    ],
                    "guid": "IdLKT+/onF",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-13",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-13-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-13-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\" />"
                    ],
                    "guid": "JN9:o{V}Az",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-14",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-14-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-14-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\" />"
                    ],
                    "guid": "D<)#O|{+*/",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-15",
                        "",
                        "<img src=\"tmppft9thz8.jpg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-15-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-15-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\">"
                    ],
                    "guid": "7soy)2F!#",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "a1ca5bd29fd84d3380e262f4c5fc0b15-oa-16",
                        "",
                        "<img src=\"tmppft9thz8.jpg\">",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-16-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-16-A.svg\" />",
                        "<img src=\"a1ca5bd29fd84d3380e262f4c5fc0b15-oa-O.svg\" />"
                    ],
                    "guid": "qPB,w2m&@U",
                    "note_model_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<b><span style=\"font-weight: 400;\">In Networking,&nbsp;</span></b>{{c1::encapsulation}}<b><span style=\"font-weight: 400;\">&nbsp;is the process of taking data from one protocol and translating it into data that is used by another protocol as the data continues across a network.</span></b>",
                        "<img src=\"paste-aea946f1b8898c759f980cd94d31249b4af29d32.jpg\">"
                    ],
                    "guid": "qB72khcM0C",
                    "note_model_uuid": "11adbb66-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "End-hosts implement all five layers, intermediate devices {{c1::don’t::do/dont}}.",
                        ""
                    ],
                    "guid": "oy7M(>iPxr",
                    "note_model_uuid": "11adbb66-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "End to end principle<br><br>The network core should be {{c1::simple}} and {{c1::minimal}}, while the end systems should carry the {{c1::intelligence}}.",
                        "Moving functions and services closer to the applications that use them, increases the flexibility and the autonomy of the application designer to offer these services to the needs of the specific application. Thus, the higher-level protocol layers, are more specific to an application. Whereas the lower-level protocol layers are free to organize the lower-level network resources to achieve application design goals more efficiently and independently of the specific application.<br><br><img src=\"paste-888e8fccd34d585b3b577c80afd3e8ce70d00bc5.jpg\">"
                    ],
                    "guid": "OJU%:)|j*)",
                    "note_model_uuid": "11adbb66-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<b><span style=\"font-weight: 400;\">What are two examples of things that violation of e2e principle?</span></b>",
                        "1. Firewalls<br>2. NATs",
                        ""
                    ],
                    "guid": "GqhuCD+q~i",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<b><span style=\"font-weight: 400;\">T/F<br></span></b><br><img src=\"paste-17f75faa8f5819df80844121056ca1503726dafd.jpg\"><br><br>Firewalls violate the e2e principle since they are intermediate devices operated between two end hosts and can drop the end hosts' communication.&nbsp;",
                        "True",
                        ""
                    ],
                    "guid": "MC!%Rw01e8",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<strong>Why do NAT boxes violate the e2e principle?</strong>",
                        "<b>The hosts behind NAT boxes are not globally addressable or routable.</b> <br><br>As a result, it is not possible for other hosts on the public Internet to initiate connections to these devices. So, if we have a host behind a NAT and a host on the public Internet, they cannot communicate by default without the intervention of a NAT box.<br><br><img src=\"paste-27e5ad70d0ee87058c016c89bdc9fb8be0ace77e.jpg\">",
                        ""
                    ],
                    "guid": "qhdLa}!5<d",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "{{c1::EvoArch}}<b><span style=\"font-weight: 400;\">&nbsp;is a discrete-time model that is executed over rounds which can help illustrate layered&nbsp;</span></b>{{c2::architectures}}<b><span style=\"font-weight: 400;\">&nbsp;and their evolution in a&nbsp;</span></b>{{c2::quantitative}}<b><span style=\"font-weight: 400;\">&nbsp;manner.</span></b>",
                        ""
                    ],
                    "guid": "qG3^%m;2!p",
                    "note_model_uuid": "11adbb66-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Repeaters and hubs operate on what layer of the OSI Model?",
                        "Physical Layer (L1)",
                        ""
                    ],
                    "guid": "JGNK9,?or",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Bridges operate on what layer of the OSI Model?",
                        "Data Link Layer (L2) along with Layer2-Switches",
                        ""
                    ],
                    "guid": "NHFd7u02Cj",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "[Routers operate on what layer of the OSI Model?",
                        "Network Layer (L3) along with Layer3-Switches",
                        ""
                    ],
                    "guid": "JIPlrI#iLu",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What is a bridge?",
                        "A bridge is a device with multiple inputs/outputs. <br><br>A bridge transfers frames from an input to one or more outputs.",
                        ""
                    ],
                    "guid": "Iij=O9C#NR",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "How does a bridge 'learn'?",
                        "It learns by populating/maintaing a forwarding table.&nbsp;<br><br>When the bridge receives any frame this is a “learning opportunity” to know which hosts are reachable through which ports. This is because the bridge can view the port over which a frame arrives and the source host. Going back to our example topology, eventually the bridge builds the following forwarding table.<br><br><img src=\"paste-eff2f16e5153efef548d03e4bcc00afb99c40406.jpg\"><img src=\"paste-4cd125ed2523225424e18edda8e616ca2b3ef878.jpg\"><br>",
                        ""
                    ],
                    "guid": "xk/^wkl:J/",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<div><b><span style=\"font-weight: 400;\">What is the</span><span style=\"font-weight: 400;\">&nbsp;combination of the segment and the network header called?</span></b></div>",
                        "<span style=\"font-weight: 700;\">Datagram</span>",
                        ""
                    ],
                    "guid": "K:f~5&pSO?",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1",
                        "cn::studyquiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "T/F<div><br></div><div>The e2e principle suggests that specific application-level functions usually can, and preferably should be built into the lower levels of the system at the core of the network.&nbsp;<b><br></b></div>",
                        "FALSE<br><br><b><div><span style=\"font-weight: 400;\">The e2e principle suggests that specific application-level functions usually </span>cannot<span style=\"font-weight: 400;\">, and preferably </span>should not<span style=\"font-weight: 400;\"> be built into the lower levels of the system at the core of the network. The e2e principle is summarized as: the network core should be simple and minimal, while the end systems should carry the intelligence.</span></div></b><br>",
                        ""
                    ],
                    "guid": "P8`LpMC~.d",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1",
                        "cn::studyquiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<div><b><span style=\"font-weight: 400;\">The Internet protocol stack has a layered architecture that resembles what kind of shape?</span></b><br></div>",
                        "Hourglass",
                        ""
                    ],
                    "guid": "vVAlsDO=E}",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1",
                        "cn::studyquiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<div>The EvoArch model considers an abstract model of the Internet’s protocol stack, selecting components that are applied.<b><br><ol><ol><li><div>Layers</div></li><li><div>Node incoming edges</div></li><li><div>Edges</div></li><li><div>Nodes</div></li><li><div><span style=\"font-weight: 400;\">Node survival rate</span></div></li><li><div><span style=\"font-weight: 400;\">Layer probability</span></div></li></ol></ol></b></div>",
                        "<ol style=\"\"><li style=\"font-weight: 700;\"><div>Layers</div></li><li style=\"font-weight: 700;\"><div>Node incoming edges</div></li><li style=\"font-weight: 700;\"><div>Edges</div></li><li style=\"font-weight: 700;\"><div>Nodes</div></li></ol>",
                        ""
                    ],
                    "guid": "mNA=iEh^V,",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1",
                        "cn::studyquiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What is the first computer network concept that was invented in 1969 called?",
                        "<b>ARPANET</b>",
                        ""
                    ],
                    "guid": "MB1M7dwmsX",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1",
                        "cn::studyquiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<div><b>What is the initial ARPANET Host-to-Host protocol called?</b><br><ol><ol><li><div>TCP</div></li><li><div>UDP</div></li><li><div>NCP</div></li><li><div>IP</div></li></ol></ol></div>",
                        "NCP",
                        ""
                    ],
                    "guid": "n;7]Aqdupr",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1",
                        "cn::studyquiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What is the first application that used the initial ARPANET protocol?",
                        "<b>Email</b>",
                        ""
                    ],
                    "guid": "tOrA%$qyBt",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1",
                        "cn::studyquiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What is one of the first and most popular applications that sprung up after DNS (Domain Name System)?",
                        "<b>WWW (World WIde Web)</b>",
                        ""
                    ],
                    "guid": "q#kgZO{UEm",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1",
                        "cn::studyquiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What is the interface between the Application layer and Transport layer called?",
                        "<b>Sockets</b>",
                        ""
                    ],
                    "guid": "Mu6s}1l$?X",
                    "note_model_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
                    "tags": [
                        "cn",
                        "cn::exam1",
                        "cn::lesson1",
                        "cn::studyquiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>List some protocols that operate at the Application Layer",
                        "HTTP, HTTPS, SMTP, FTP, SSH, DNS"
                    ],
                    "guid": "c/kwVC`zYI",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>What protocols operate at the <b>Transport Layer</b>",
                        "TCP, UDP"
                    ],
                    "guid": "rUG|xy0ff0",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>List some protocols that operate on the <b>Network Layer</b>.",
                        "IP, ARP, ICMP"
                    ],
                    "guid": "qywK_zxp|)",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "OSI Model<br><br>List some protocols that operate at the <b>Datalink Layer.</b>",
                        "PPP, IEEE 802.2, Ethernet, WiFi, DOCSIS"
                    ],
                    "guid": "o?U$w{gB,r",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What does Encapsulation do?",
                        "The data is sent down each layer of the OSI Model building a Protocol Data Unit&nbsp;(PDU) or Package by wrapping the data with header&nbsp;and optionally trailer information, both of which contain control information to the PDU from the layer above."
                    ],
                    "guid": "H%2OikFpoI",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What does De-encapsulation do?",
                        "A recieving node or itermidary read/strip layers of the Package to get to address information so that it can be redirected or assembled with other packages at the destination."
                    ],
                    "guid": "P4visX#KAR",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "How did Licklider and his team in the early 1960s experiment with a precursor to the Internet? <br><br><ol><li>Building the HTTP protocol</li><li>Creating the first web browser</li><li>Prototyping Network Control Protocol (NCP)</li><li>Connecting two computers over a dial-up telephone line</li></ol>",
                        "4. Connecting two computers over a dial-up telephone line"
                    ],
                    "guid": "yl?/ndCnR;",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "Weekly_Quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What is the Domain Name System (DNS) designed to do primarily? <br>Group of answer choices<br><br><ol><li>Create simple web pages</li><li>Route traffic through a network</li><li>Create more IP addresses</li><li>Translate domain names into IP addresses</li></ol>",
                        "4. Translate domain names into IP addresses"
                    ],
                    "guid": "MI?:8+BR,y",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "Weekly_Quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What is the architectural design of the Internet protocol stack based on? <br><ol><li>Applications</li><li>Layers</li><li>Signals</li></ol>",
                        "2. Layers"
                    ],
                    "guid": "OZlXkaW+({",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "Weekly_Quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Both the data link and transports layer protocols may provide error correction. <br><ol><li>True</li><li>False</li></ol>",
                        "1. True"
                    ],
                    "guid": "c%xdO{nH}x",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "Weekly_Quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What allows for communication between the application layer and transport layer? <br><ol><li>Hosts</li><li>Routers</li><li>Sockets</li><li>Bridges</li></ol>",
                        "3. Sockets"
                    ],
                    "guid": "pDpS5Dd%NJ",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "Weekly_Quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Which of the following protocols belong to the application layer? <br><ol><li>DNS (Domain Name Service)</li><li>IP (Internet Protocol)</li><li>UDP (User Datagram Protocol)</li><li>Ethernet</li></ol>",
                        "1. DNS (Domain Name Service)"
                    ],
                    "guid": "L0.-aWmxj~",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "Weekly_Quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Which two protocols belong to the transport layer? Select all that apply. <br><ol><li>HTTP</li><li>IP</li><li>TCP</li><li>UDP</li></ol>",
                        "3. TCP<br>4. UDP"
                    ],
                    "guid": "bP.V5AR8|/",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "Weekly_Quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "When an application sends a packet of information across the network, this packet travels down the IP stack and undergoes what process? <br><ol><li>Augmentation</li><li>Encapsulation</li><li>De-encapsulation</li><li>Transportation</li></ol>",
                        "2. Encapsulation"
                    ],
                    "guid": "ibKeGGrV*N",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "Weekly_Quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "According to the end-to-end principle, where should most of the Internet’s functionality/intelligence be implemented? <br><ol><li>At the edges of a network</li><li>At the core of a network</li><li>Wherever convenient for the designer</li><li>At middle boxes in a network</li></ol>",
                        "1. At the edges of a network"
                    ],
                    "guid": "D(P}eoc/w]",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "Weekly_Quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What is the difference between hubs, bridges, and routers? <br><ol><li>They remove malicious traffic at different tiers</li><li>They operate on different layers of the IP stack</li><li>Firewalls are built into all routers, but not the other devices.</li><li>Some provide additional caching services</li></ol>",
                        "2. They operate on different layers of the IP stack"
                    ],
                    "guid": "w$g[O[?`Bv",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "Weekly_Quiz"
                    ]
                }
            ]
        },
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "11ae9540-a760-11ed-8af1-a14d95925fac",
            "deck_config_uuid": "11ae97d4-a760-11ed-8af1-a14d95925fac",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [
                "latex-9ad99798ec4c38e165cf517cb9e02b1c9e824103.png",
                "latex-a9f23bf124b6b2b2a993eb313c72e678664ac74a.png",
                "latex-afce2822f3f38f916d0f810911d772603e8e27df.png"
            ],
            "name": "Lesson 3: Intradomain Routing",
            "newLimit": null,
            "newLimitToday": null,
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "When talking about how a packet is transferred from its sending host to its destination host, \"forwarding\" refers to",
                        "transferring a packet from an incoming link to an outgoing link within a single router"
                    ],
                    "guid": "j&GO{4$j6A",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "When talking about how a packet is transferred from its sending host to its destination host, \"intradomain routing\" refers to",
                        "how routers work together using routing protocols to determine good paths within the same administrative domain"
                    ],
                    "guid": "g@<F.tK#.c",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "When talking about how a packet is transferred from its sending host to its destination host, <b>interdomain routing</b> refers to",
                        "how routers work together using routing protocols to determine good paths across <b>different</b> administrative domains"
                    ],
                    "guid": "K9mBj?QEkr",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Which action is network-wide (i.e. involves multiple routers) routing or switching?",
                        "routing"
                    ],
                    "guid": "As__/1h;V6",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What happens when a packet is moved from a router’s input link to the appropriate link",
                        "The packet is <b>forwarded</b>"
                    ],
                    "guid": "z_-,x3Xozt",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "In intradomain routing what could the weights of each edge in the graph represent?",
                        "<ul><li>Lenghth of the cable</li><li>Time delay to traverse the link</li><li>Monetary Cost</li><li>Link Capacity</li><li>Current Load on the Link</li></ul>"
                    ],
                    "guid": "cqSyPbsqEV",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "T/F<br><br>Intradomain routing involves multiple administrative domains.",
                        "<div>False</div>"
                    ],
                    "guid": "L(*ozW{Dvt",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What is the problem with using current load as a weight with link-state algorithms?",
                        "The weighs are&nbsp;<i>not</i>&nbsp;static and change dramatically as traffic moves over the network. This is a non-trivial problem which can cause pathological behavior."
                    ],
                    "guid": "AbG@IAqlm)",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "T/F<br><br>Upon termination of Dijkstra’s algorithm, all nodes in a network&nbsp;are aware of the entire network topology.&nbsp;",
                        "True"
                    ],
                    "guid": "PXro1cq0vz",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<div>What three words can be used to describe the distance vector algorithm?</div>",
                        "<ul><li>Distributed</li><li>Iterative</li><li>Asynchronous</li></ul>"
                    ],
                    "guid": "j9PadkE-A[",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What is the computational complexity of the Linkstate Routing Algorithm where n represents the nodes in the topology?",
                        "[$]O(n^{2})[/$]"
                    ],
                    "guid": "P&o>*qe7Ua",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What is one possible cause for the count to infinity problem?",
                        "Routing Loops"
                    ],
                    "guid": "g#a~W6L/[y",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Dijkstra’s algorithm is a _______<i> </i>routing algorithm, which is also referred to as a&nbsp;_______ algorithm.",
                        "<ul><li>global</li><li>link-state</li></ul>"
                    ],
                    "guid": "n^>-EVo6G%",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "The Bellman Ford equation is used by what routing algorithm?",
                        "<div>distance vector routing</div>"
                    ],
                    "guid": "G{O,eO`7#o",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Routing Information Protocol (RIP) is an example of what two kinds of algorithms?",
                        "<div><ol><li>distance vector</li><li>intradomain</li></ol></div>"
                    ],
                    "guid": "z%>P}nolDy",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
<<<<<<< Updated upstream
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Routing Policies: Importing and Exporting Routes\n</h2><div>Provider&nbsp;ASes&nbsp;have a financial&nbsp;incentive&nbsp;to forward as much of their customers’ traffic as possible.&nbsp;<br></div><div>T/F?</div>",
                        "True"
                    ],
                    "guid": "Nobd;ui>f7",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Routing Policies: Importing and Exporting Routes\n</h2><div>What order does an AS to import its routes based on their incentive?</div><div>{{c1::Customers}} → {{c1::Peers}} → {{c1::Providers}}</div>",
                        ""
                    ],
                    "guid": "B2F`sM7E-!",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP and Design Goals\n</h2><div><div>What are the design goals of the BGP protocol?</div><div><ul><li>{{c1::Scalability}}</li><li>{{c2::Express}} routing policies</li><li>Allow {{c3::cooperation among ASes}}</li><li>{{c4::Security}}</li></ul></div></div>",
                        ""
                    ],
                    "guid": "ErO_FetfMr",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP and Design Goals\n</h2><h3>\n  What are the design goals of the BGP protocol?\n</h3><div><b>Scalability</b>: One of the design goals of BGP is to manage the complications of this growth while {{c1::achieving convergence in reasonable timescales}}&nbsp;and {{c2::providing loop-free paths}}.&nbsp;<br></div>",
                        ""
                    ],
                    "guid": "vJ0*r(4o3?",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP and Design Goals\n</h2><h3>What are the design goals of the BGP protocol?</h3>\n<div><b>Express routing policies</b>: BGP has defined route attributes that allow ASes to implement policies (which routes to import and export) through {{c1::route filtering}} and {{c1::route ranking}}.<br></div>",
                        "<div>\n  Each ASes routing decisions can be kept confidential, and each AS can implement them independently of one another.\n</div>"
                    ],
                    "guid": "pbYI$-v`)i",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP and Design Goals\n</h2><h3>What are the design goals of the BGP protocol?</h3><div><b>Security</b>: There have been several efforts to enhance BGP security ranging from</div><div><ul><li>{{c1::protocols (e.g., S-BGP)}}</li><li>{{c2::additional infrastructure (e.g., registries to maintain up-to-date information about which ASes own which prefixes ASes)}}</li><li>{{c3::public keys for ASes}}, etc.</li></ul></div>",
                        ""
                    ],
                    "guid": "oHs:wi8o5`",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Protocol Basics\n</h2><div><div>A pair of routers, known as&nbsp;{{c1::BGP peers}}, exchange routing information over a semi-permanent {{c2::TCP port connection}} called a&nbsp;{{c3::BGP session}}. In order to begin a {{c3::BGP session}}, a router will {{c4::send an OPEN message to another router}}. Then the sending and receiving routers will send each other {{c5::announcements}} from {{c6::their routing tables}}. The time it takes to exchange routes varies from {{c7::a few seconds}} to {{c7::several minutes}}, depending on the number of routes exchanged.</div></div>",
                        ""
                    ],
                    "guid": "J^x[!Uen}:",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Protocol Basics\n</h2><div><div>A BGP session between a pair of routers in two different ASes is called {{c1::an&nbsp;external BGP (eBGP) session}}, and a BGP session between routers that belong to the same AS is called {{c1::an&nbsp;internal BGP&nbsp;(iBGP)&nbsp;session}}.<br></div></div>",
                        ""
                    ],
                    "guid": "JeTXY),>~z",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Protocol Basics\n</h2><div><div>After BGP peers establish a session,&nbsp;&nbsp;they can exchange BGP messages to {{c1::provide reachability information}} and {{c1::enforce routing policies}}.</div></div>",
                        ""
                    ],
                    "guid": "PK<Me1Uw*;",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Protocol Basics\n</h2><div><div>We have two types of <b>BGP messages</b>:&nbsp;</div><ul><li>{{c1::UPDATE}}&nbsp;messages: {{c2::contain information about the routes that have changed since the previous update.}}</li><li>{{c1::KEEPALIVE}}&nbsp;messages: {{c3::are exchanged between peers to keep a current session going.}}</li></ul></div>",
                        ""
                    ],
                    "guid": "sV8o{0lmrw",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Protocol Basics\n</h2><div><div>There are two kinds of updates:</div><div><ul><li>{{c1::Announcements}}: {{c2::messages that advertise new routes and updates to existing routes. They include several standardized attributes.}}</li><li>{{c1::Withdrawals}}: {{c3::a previously announced route is no longer available.}}</li></ul></div></div>",
                        ""
                    ],
                    "guid": "pM~%gjZjd7",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Protocol Basics\n</h2><div>In the BGP protocol, destinations are represented by {{c1::IP prefixes}}. Each {{c1::prefix}} represents {{c2::a subnet or a collection of subnets that an AS can reach}}. Gateway routers running {{c3::eBGP}} advertise {{c4::the IP prefixes they can reach}} according to the AS's specific export policy to routers in neighboring ASes. Then, using separate {{c5::iBGP sessions}}, the gateway routers disseminate these routes for external destinations to other internal routers according to {{c6::the AS's import policy}}. Internal routers run {{c5::iBGP}} to propagate {{c7::the external routes}} to {{c7::other internal iBGP speaking routers}}.&nbsp;&nbsp;</div>",
                        ""
                    ],
                    "guid": "eY@YDLo{}}",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Protocol Basics\n</h2><div><div>In addition to the reachable IP prefix field, advertised&nbsp;BGP routes&nbsp;consist of several&nbsp;{{c1::BGP attributes}}. Two notable {{c1::attributes}} are {{c2::AS-PATH}} and {{c2::NEXT-HOP}}.</div></div>",
                        ""
                    ],
                    "guid": "jCoj%IN]-4",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Protocol Basics\n</h2><div><div>Each AS is identified by its&nbsp;{{c1::autonomous system number (ASN)}}. As an announcement passes through various ASes, their identifiers are included in the {{c2::ASPATH}} attribute.&nbsp;This attribute {{c3::prevents loops}} and is used to {{c4::choose between multiple routes to the same destination, the route with the shortest path}}.</div></div>",
                        ""
                    ],
                    "guid": "m2yB^h~{CD",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Protocol Basics\n</h2><div>NEXT HOP:&nbsp;This attribute refers to the next-hop router's {{c1::IP address (interface) along the path towards the destination}}. Internal routers use the field to store {{c2::the IP address of the border router}}.<br></div>",
                        "Internal BGP routers will forward all traffic bound for external destinations through the border router. Suppose there is more than one such router on the network, and each advertises a path to the same external destination. In that case, NEXT HOP allows the internal router to store in the forwarding table the best path according to the AS routing policy."
                    ],
                    "guid": "i]$TE!Hiw&",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  iBGP and eBGP\n</h2><div>iBGP is used to disseminate routes for {{c1::external::internal/external}} destinations.</div>",
                        "iBGP is used to communicate external routes to internal (non-border) routers within the AS."
                    ],
                    "guid": "t?xZI<oN-I",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  iBGP and eBGP\n</h2><div>eBGP is used to disseminate routes for {{c1::external::internal/external}} destinations.</div>",
                        ""
                    ],
                    "guid": "J]2Ilo<#FJ",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  iBGP and eBGP\n</h2><div>Which protocol is used to disseminate routes for external destinations?</div>",
                        "Both iBGP and eBGP"
                    ],
                    "guid": "k}$-uIYXb6",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  iBGP and eBGP\n</h2><div>Each eBGP speaking router has an iBGP session with {{c1::every other BGP router in the AS}} to send updates about the routes it learns (over eBGP).</div>",
                        ""
                    ],
                    "guid": "IApK_>c+ep",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  iBGP and eBGP\n</h2><div>IGP-like protocols are used to {{c1::establish paths between the internal routers of an AS based on specific costs within the AS}}. In contrast, iBGP is {{c2::only used to disseminate external routes within the AS}}.</div>",
                        ""
                    ],
                    "guid": "o=&-zC88[A",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  iBGP and eBGP\n</h2><div>What is the difference between iBGP and eBGP?<br></div>",
                        "Both flavors (iBGP and eBGP) take care of disseminating *external* routes. An eBGP session is established between two border routers that belong to different ASes. An iBGP session is established between routers that belong to the same AS. Once a router hears about a route that is learned through eBGP, then it disseminates that route to other internal routers in the same AS, using iBGP."
                    ],
                    "guid": "xuRj4ue#?-",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  iBGP and eBGP\n</h2><div>What is the difference between iBGP and IGP?&nbsp;<br></div>",
                        "<div>IGP-like protocols are used to establish paths between the internal routers of an AS based on specific costs within the AS. In contrast, iBGP is only used to disseminate external routes within the AS.<br></div>"
                    ],
                    "guid": "F^UQL=Y$LN",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Decision Process: Selecting Routes at a Router\n</h2><div>A router receives incoming BGP messages and processes them. When a router receives advertisements, it:</div><div><ul><li>{{c1::applies the import policies}} to exclude routes from further consideration.</li><li>Then the router implements the decision process to select the best routes that reflect the policy in place.</li><li>Next, the&nbsp;newly selected routes are {{c2::installed in the forwarding table}}.</li><li>Finally, the router decides which neighbors to export the route to by {{c3::applying the export policy}}.&nbsp;</li></ul></div>",
                        ""
                    ],
                    "guid": "ygp!h8ER5{",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Decision Process: Selecting Routes at a Router\n</h2><div>A router compares a pair of routes by {{c1::going through the list of attributes}}.</div>",
                        "For each attribute, it selects the route with the attribute value that will help apply the policy. If for a specific attribute, the values are the same, then it goes to the next attribute."
                    ],
                    "guid": "x*C2y1];.;",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Decision Process: Selecting Routes at a Router\n</h2><div>Attributes are set:</div><div><ul><li>locally by the AS (e.g., {{c1::LocalPref}})</li><li>by the neighboring AS (e.g., {{c2::MED}})</li><li>by the protocol (e.g., {{c3::if a route is learned through eBGP or iBGP}})</li></ul></div>",
                        ""
                    ],
                    "guid": "oh-u(>`djj",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Decision Process: Selecting Routes at a Router\n</h2><div><div>A router within an AS decides which route to export by first applying import policies to exclude routes entirely from further consideration.</div></div><div>T/F?</div>",
                        "True"
                    ],
                    "guid": "O1N!~PeNM%",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Decision Process: Selecting Routes at a Router\n</h2><div><div>The LocalPref attribute is used to prefer routes learned through a specific AS over other ASes for {{c1::Outbound::Inbound/Outbound}}&nbsp;traffic.&nbsp;</div></div>",
                        ""
                    ],
                    "guid": "uM8=]/eO2k",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Decision Process: Selecting Routes at a Router\n</h2><div><div>Assume that <b>AS X</b> learns of a route to the same destination a via <b>AS Y</b> and <b>AS Z</b>. If <b>X</b> prefers to route its traffic through <b>Z</b> due to peering or business, it can assign a {{c1::Higher::Lower/Higher}} LocalPref value to routes it learns from <b>Z</b>, and thus using LocalPref, <b>AS X</b> can control where traffic exits the AS.&nbsp;</div></div>",
                        ""
                    ],
                    "guid": "y-<:}j]CJy",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Decision Process: Selecting Routes at a Router\n</h2><div><div>The MED (Multi-Exit Discriminator) value is used by ASes connected by multiple links to designate which of those links are preferred for {{c1::Inbound::Inbound/Outbound}} traffic.</div></div>",
                        ""
                    ],
                    "guid": "nMAPbmZtq:",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  BGP Decision Process: Selecting Routes at a Router\n</h2><div><div>Assume that AS X prefers routes advertised to AS Y to go through R1 as opposed to R2. For AS Y to be influenced to choose R1 to forward traffic to AS X, R1 must have a {{c1::Lower::Lower/Higher}} MED value, assuming that all other attributes are equal.</div></div>",
                        ""
                    ],
                    "guid": "F<in4yhI?0",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Challenges with BGP: Scalability and Misconfigurations\n</h2><div>A possible misconfiguration or an error can create {{c1::an excessively large number of updates}}, resulting in:</div><div><ul><li>route {{c2::instability}}</li><li>{{c3::router processor and memory overloading}}</li><li>{{c4::outages}}</li><li>{{c5::router failures}}</li></ul></div>",
                        ""
                    ],
                    "guid": "jK1GLeH{U+",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Challenges with BGP: Scalability and Misconfigurations\n</h2><div>Long, specific prefixes can be filtered to {{c1::encourage route aggregation}}.<br></div>",
                        ""
                    ],
                    "guid": "B{AvCgPQD?",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Challenges with BGP: Scalability and Misconfigurations\n</h2><div>Some small ASes also have the option to configure&nbsp;{{c1::default routes}}&nbsp;into their forwarding tables.<br></div>",
                        ""
                    ],
                    "guid": "QQyob?so)/",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Challenges with BGP: Scalability and Misconfigurations\n</h2><div>An AS can limit the number of routing changes, explicitly limiting the propagation of unstable routes by using a mechanism known as&nbsp;{{c1::flap damping}}. To apply this technique, an AS will {{c2::track the number of updates to a specific prefix over a certain amount of time. If the tracked value reaches a configurable value, the AS can suppress that route until a later time}}.<br></div>",
                        ""
                    ],
                    "guid": "KiXLo7qo+H",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Peering at {{c1::IXPs}}\n</h2><div>ASes can either peer with one another directly or peer at&nbsp;{{c1::Internet Exchange Points (IXPs)}}.<br></div>",
                        "IXPs are infrastructures that facilitate peering and provide more services."
                    ],
                    "guid": "F6qF6=RM%[",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Peering at {{c1::IXPs}}\n</h2><div>The ASes that interconnect at an {{c1::IXP}} are called {{c2::participant ASes}}.<br></div>",
                        ""
                    ],
                    "guid": "H%2hHF/BlF",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Peering at IXPs</h2><div><div>Why have IXPs become increasingly popular, and why are they important to study?</div><ul><li>IXPs are interconnection hubs handling {{c1::large traffic volumes}}</li><li>An important role in mitigating {{c2::DDoS attacks}}</li><li>“Real-world” infrastructures with a plethora of {{c3::research opportunities}}</li><li>IXPs are active {{c4::marketplaces}} and {{c4::technology innovation hubs}}</li></ul></div>",
                        ""
                    ],
                    "guid": "N^Bh?+t4}j",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Peering at IXPs</h2><div><div>Why do networks choose to peer at IXPs?</div><ul><li>They are keeping {{c1::local traffic local}}</li><li>{{c2::Lower costs}}</li><li>{{c3::Network performance}}</li><li>{{c4::Incentives}}</li></ul></div>",
                        "Critical players in today’s Internet ecosystem often “incentivize” other networks to connect at IXPs. For example, a prominent content provider may require another network to be present at a specific IXP or IXPS in order to peer with them."
                    ],
                    "guid": "ifCA$WGwrH",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Peering at IXPs</h2><div><div>What services are offered at IXPs?</div><ul><li>{{c1::Public peering}}</li><li>{{c1::Private peering}}</li><li>{{c2::Route servers and Service level agreements}}</li><li>{{c2::Remote peering through resellers}}</li><li>{{c2::Mobile peering}}</li><li>{{c3::DDoS blackholing}}</li><li>{{c3::Free value-added services}}</li></ul></div>",
                        ""
                    ],
                    "guid": "rts0H~iQ{5",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Peering at IXPs</h2><div>Public peering:&nbsp;The most well-known use of IXPs is public peering service, in which {{c1::two networks use the IXP’s network infrastructure to establish a connection to exchange traffic based on their bilateral relations and traffic requirements}}.&nbsp;<br></div>",
                        ""
                    ],
                    "guid": "fQ{^<-ec)o",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Peering at IXPs</h2><div>Private peering:&nbsp;Most operational IXPs also provide a private peering service (Private Interconnects, or PIs) that allows {{c1::direct traffic exchange between the two parties, and doesn’t use the IXP’s public peering infrastructure}}.&nbsp;<br></div>",
                        ""
                    ],
                    "guid": "w:H#biC!.9",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Peering at IXPs</h2><div>Route servers and Service level agreements allow participants to {{c1::arrange instant peering with many co-located participant networks using essentially a single agreement/BGP session}}.<br></div>",
                        ""
                    ],
                    "guid": "e)k3_rsd*r",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Peering at IXPs</h2><div>Remote peering through resellers: {{c1::Third parties resell IXP ports wherever they have infrastructure connected to the IXP}}. These third parties can offer the IXP’s service {{c2::remotely, which will enable networks that have little traffic also to use the IXP}}.<br></div>",
                        ""
                    ],
                    "guid": "GAs8B:s0>5",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Peering at IXPs</h2><div>DDoS blackholing:&nbsp;A few IXPs support customer-triggered blackholing, which allows {{c1::users to alleviate the effects of DDoS attacks against their network}}.<br></div>",
                        ""
                    ],
                    "guid": "I/[BKq@+}y",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>\n  Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>\n  Peering at IXPs</h2><div>One of the services offered by IXPs is protection against ________ attacks.<br></div>",
                        "<div><ul><li>BGP Hijacking&nbsp;</li><li>DDoS&nbsp;</li><li>Malware&nbsp;</li><li>Phishing</li></ul></div>",
                        "<ul><li><strike>BGP Hijacking</strike></li><li><span style=\"color: rgb(0, 0, 255);\">DDoS</span></li><li><strike>Malware</strike></li><li><strike>Phishing</strike></li></ul>"
                    ],
                    "guid": "fp:6bMjl2C",
                    "note_model_uuid": "0e109998-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Peering at IXPs</h2><div><div>Participation of an AS in an IXP is free.</div></div><div>T/F?</div>",
                        "False"
                    ],
                    "guid": "D@2a9x*j&o",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Peering at IXPs</h2><div><div>IXPs handle large volumes of traffic.</div></div><div>T/F?</div>",
                        "True"
                    ],
                    "guid": "cg22u#~K.G",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Peering at IXPs</h2><div><div>One of the reasons why networks choose to peer at IXPs is because critical players in today’s Internet ecosystem often “incentivize” other networks to connect at IXPs.</div></div><div>T/F?</div>",
                        "True"
                    ],
                    "guid": "Nt7j-G)AgO",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Peering at IXPs</h2><div><div>IXPs users may use route servers for an additional cost.</div></div><div>T/F?</div>",
                        "False<br><br>Many IXPs also include service level agreements (SLAs) and <b>free</b> use of the IXP’s route servers for participants."
                    ],
                    "guid": "B~?<[WuxU}",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Peering at IXPs: How Does a Route Server Work?</h2><div>Bilateral sessions for every pair of ASes exchanging traffic in an IXP does not scale. To mitigate this, some IXPs operate a {{c1::route server}}, which helps to make peering&nbsp;more manageable.<br></div>",
                        ""
                    ],
                    "guid": "Orx$2H1@pY",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Peering at IXPs: How Does a Route Server Work?</h2><div><div>A Route Server (RS)&nbsp;does the following:</div><ul><li>{{c1::Collects and shares routing information from its peers or participants of the IXP that connect to the RS}}</li><li>{{c1::Executes its own BGP decision process and re-advertises the resulting information (e.g., best route selection) to all RS's peer routers}}</li></ul></div>",
                        ""
                    ],
                    "guid": "jf<]yO[@Lz",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Peering at IXPs: How Does a Route Server Work?</h2><div>Route servers maintain two types of route filters.</div><div><ul><li>{{c1::Import filters&nbsp;are applied to ensure that each member AS only advertises routes that it should advertise.}}</li><li>{{c1::Export filters&nbsp;are&nbsp;typically triggered by the IXP members themselves to restrict the set of other IXP member ASes that receive their routes.}}</li></ul></div>",
                        ""
                    ],
                    "guid": "s,Pa[ABGMD",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Peering at IXPs: How Does a Route Server Work?</h2><div>Route Servers&nbsp;keep track of the BGP sessions they maintain with each participant AS through RIBs.<br></div><div>T/F?</div>",
                        "True"
                    ],
                    "guid": "eTA<4d5UPk",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Peering at IXPs: How Does a Route Server Work?</h2><div>{{c1::Import::Import/Export}} filters are applied to ensure that each IXP member AS only advertises routes that it should advertise.&nbsp;<br></div>",
                        ""
                    ],
                    "guid": "Gs!D7x9KU0",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lesson04",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Remote Peering</h2><div>Remote peering (RP) is {{c1::peering at the peering point without the necessary physical presence}}. The&nbsp;remote peering provider&nbsp;is {{c2::an entity that sells access to IXPs through their own infrastructure}}.<br></div>",
                        "RP removes the barrier to connecting to IXPs around the world, which in itself can be a more cost-effective solution for localized or regional network operators."
                    ],
                    "guid": "r(GvX&j1YS",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04",
                        "optional"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Remote Peering</h2><div>The primary method of identifying remote peering is {{c1::to measure the round-trip time (RTT) between a vantage point (VP) inside the IXP and the IXP peering interface of a member}}.<br></div>",
                        "<span style=\"color: rgb(45, 59, 69); background-color: rgb(255, 255, 255);\">However, this method fails to account for the changing landscape of IXPs today and even misinfers latencies of remote members as local and local members as being remote.</span>"
                    ],
                    "guid": "lN*K_OC%bn",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04",
                        "optional"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>BGP Configuration Verification</h2><div>Path visibility means that {{c1::route destinations are correctly propagated through the available links in the network}}.<br></div>",
                        ""
                    ],
                    "guid": "CFkD,X~u3-",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04",
                        "optional"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>BGP Configuration Verification</h2><div>Route validity means that {{c1::the traffic meant for a given destination reaches it}}.<br></div>",
                        ""
                    ],
                    "guid": "DyGTI3.Z%6",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04",
                        "optional"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>BGP Configuration Verification</h2><div>{{c1::The Router Configuration Checker, or&nbsp;rcc,}}&nbsp;is a tool researchers propose that detects BGP configuration faults.<br></div>",
                        ""
                    ],
                    "guid": "NFyUp0Jv1",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson04",
                        "optional"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Router Design and Algorithms</h2><div>The main job of a router is to implement {{c1::the forwarding plane functions}} and {{c2::the control plane functions}}.<br></div>",
                        ""
                    ],
                    "guid": "AUp]T%qjEg",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Router Design and Algorithms</h2><div>The main components of a router are:</div><div><ul><li>{{c1::input/output ports}}</li><li>{{c1::switching fabric}}</li><li>{{c1::routing processor}}</li></ul></div>",
                        ""
                    ],
                    "guid": "RcC`=Z.#Lc",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Router Design and Algorithms</h2><div><div>The input ports perform several functionalities:</div><ul><li>{{c1::Physically terminate the incoming links to the router}}</li><li>{{c2::decapsulates the packets (data link processing unit)}}</li><li>{{c3::perform the lookup function}}</li></ul></div>",
                        "The input ports consult the forwarding table to ensure that each packet is forwarded to the appropriate output port through the switch fabric."
                    ],
                    "guid": "Jmb/mC9grb",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Router Design and Algorithms</h2><div>The switching fabric {{c1::moves the packets from input to output ports}}, and it {{c1::makes the connections between the input and the output ports}}.</div><div>There are three types of switching fabrics:</div><div><ul><li>{{c2::memory}}</li><li>{{c2::bus}}</li><li>{{c2::crossbar}}</li></ul></div>",
                        ""
                    ],
                    "guid": "w~Z)V%!p5%",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Router Design and Algorithms</h2><div>The output ports {{c1::receive and queue the packets from the switching fabric}} and then {{c2::send them over to the outgoing link}}.<br></div>",
                        ""
                    ],
                    "guid": "uxukLh}o~s",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1>\n<h2>Router Design and Algorithms</h2>\n<h3>What's Inside a Router?</h3>\n<div>Control plane functions refer to:</div><div><ul><li>{{c1::implementing the routing protocols}}</li><li>{{c1::maintaining the routing tables}}</li><li>{{c1::computing the forwarding table}}</li></ul></div>",
                        "These functions are implemented in software in the routing processor, or could be implemented by a remote controller."
                    ],
                    "guid": "qUHG3f,k%X",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Router Design and Algorithms</h2>\n<h3>What's Inside a Router?</h3>\n<div>When a packet arrives at the input link,&nbsp; the router looks at {{c1::the destination IP address}} and determines the output link by {{c2::looking at the forwarding table (or Forwarding Information Base or FIB)}}. The {{c2::FIB}} provides {{c3::a mapping between destination prefixes and output links}}.<br></div><div><br></div><div>The routers use the {{c4::longest prefix matching}} algorithms to resolve any disambiguities. Some routers offer a more specific and complex type of lookup, called {{c5::packet classification}}, where the lookup is based on {{c5::destination or source IP addresses, port, and other criteria}}.<br></div>",
                        ""
                    ],
                    "guid": "r*$dsZ9v-h",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Router Design and Algorithms</h2>\n<h3>What's Inside a Router?</h3>\n<div>Modern fast routers use {{c1::crossbar switches}} for the switching task.<br></div>",
                        "Scheduling the switch (matching available inputs with outputs) is difficult because multiple inputs may want to send packets to the same output.&nbsp;"
                    ],
                    "guid": "ewP;*q|i!!",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Router Design and Algorithms</h2>\n<h3>What's Inside a Router?</h3>\n<div>After the packet has been switched to a specific output, it will need to be {{c1::queued (if the link is congested)}}.<br></div>",
                        "The queue may be as simple as First-In-First-Out (FIFO), or it may be more complex (e.g., weighted fair queuing) to provide delay guarantees or fair bandwidth allocation."
                    ],
                    "guid": "P3.B^xTx@p",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Router Design and Algorithms</h2>\n<h3>What's Inside a Router?</h3>\n<h4>Header validation and checksum</h4><div>The router checks the packet's {{c1::version number}}, decrements&nbsp;the {{c2::time-to-live (TTL) field}}, and recalculates {{c3::the header checksum}}.</div>",
                        ""
                    ],
                    "guid": "x+V)/BfmE0",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Router Design and Algorithms</h2>\n<h3>What's Inside a Router?</h3>\n<h4>Route processing</h4><div>The routers build their forwarding tables using routing protocols such as:</div><div><ul><li>{{c1::RIP}}</li><li>{{c1::OSPF}}</li><li>{{c1::BGP}}</li></ul></div>",
                        "These protocols are implemented in the routing processors."
                    ],
                    "guid": "BFF$yzkQ7l",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 4: AS Relationships and Interdomain Routing</h1><h2>Router Design and Algorithms</h2>\n<h3>What's Inside a Router?</h3>\n<h4>Protocol Processing</h4><div><div>The routers need to implement the following protocols to implement their functions:</div><ul><li>{{c1::Simple Network Management Protocol (SNMP)}} for a set of counters for remote inspection</li><li>{{c2::TCP and UDP}} for remote communication with the router</li><li>{{c3::Internet Control Message Protocol (ICMP)}} for sending error messages, e.g., when time-to-live (TTL) time is exceeded</li></ul></div>",
                        ""
                    ],
                    "guid": "m[uqhx>qu>",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                }
            ]
        },
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "0e17702e-a05c-11ed-8334-83f82e164357",
            "deck_config_uuid": "eedb0b70-e5c4-11ea-8fe2-e4a7a0580719",
            "desc": "",
            "dyn": 0,
            "extendNew": 23,
            "extendRev": 0,
            "media_files": [
                "multibitTrie.svg",
                "unibitTrie.jpg",
                "unibitTrieQuiz.svg"
            ],
            "name": "Lesson 05: Router Design and Algorithms",
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1><h2>Different Types of Switching</h2><div><b>Switching via memory</b>:&nbsp;Input/Output ports operate as {{c1::I/O devices}} in an operating system, controlled by the routing processor. When an input port receives a packet, it sends {{c2::an interrupt}} to the routing processor, and the packet is copied to the processor's memory. Then the processor extracts the destination address and looks into the {{c3::forward table}} to find the output port, and finally, the packet is copied into that output's port buffer.<br></div>",
                        ""
                    ],
                    "guid": "OaNvLi3hac",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1><h2>Different Types of Switching</h2><div><b>Switching via bus</b>: When an input port receives a new packet, it {{c1::puts an internal header that designates the output port}}, and it sends the packet to the shared bus. Then {{c2::all the output ports}} will receive the packet, {{c2::but only the designated one will keep it}}. {{c3::Only one packet::How many packets?}} can cross the bus at a given time<br></div>",
                        ""
                    ],
                    "guid": "P1zULOynF*",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1><h2>Different Types of Switching</h2><div><b>Switching via interconnection network</b>: A crossbar switch is an interconnection network that connects N input ports to N output ports using {{c1::2N::How many?}} buses. A Crossbar network can carry multiple packets at the same time, as long as {{c2::they are using different input and output ports}}.<br></div>",
                        ""
                    ],
                    "guid": "F4e<QzU2zj",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1><div>The data plane functions of a traditional router are implemented in {{c1::hardware::hardware/software}}.<br></div>",
                        ""
                    ],
                    "guid": "cuGUa_Q#=u",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1><div><div>The control plane functions of a traditional router are implemented in {{c1::software}}.</div></div>",
                        ""
                    ],
                    "guid": "Mwvr7$2q|@",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1><div><div>Which plane operates on a shorter timescale?</div></div>",
                        "<ul><li>Control&nbsp;</li><li>Data&nbsp;</li><li>Management&nbsp;</li><li>All planes operate on the same timescale</li></ul>",
                        "<ul><li><strike>Control</strike></li><li><span style=\"color: rgb(0, 0, 255);\">Data</span></li><li><strike>Management</strike></li><li><strike>All planes operate on the same timescale</strike></li></ul>"
                    ],
                    "guid": "lHYhW|fw`w",
                    "note_model_uuid": "0e109998-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson05",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1><div><div>Classify each function as an operation of either the data plane or control plane.</div><div><ul><li>Computing paths based on a protocol = {{c1::Control Plane::Data/Control Plane}}</li><li>Forwarding packets at Layer 3 = {{c2::Data Plane::Data/Control Plane}}</li><li>Switching packets at Layer 2 =&nbsp; {{c3::Data Plane::Data/Control Plane}}</li><li>Running protocols to build a routing table = {{c4::Control Plane::Data/Control Plane}}</li><li>Running the Spanning Tree protocol = {{c5::Control Plane::Data/Control Plane}}</li><li>Decrementing Time To Live (TTL) = {{c6::Data Plane::Data/Control Plane}}</li><li>Computing an IP header checksum = {{c7::Data Plane::Data/Control Plane}}</li><li>Running a protocol/logic to configure a middle box device for load balancing = {{c8::Control Plane::Data/Control Plane}}</li><li>Forwarding packets according to installed rules in a middlebox device = {{c9::Data Plane::Data/Control Plane}}</li></ul></div></div>",
                        ""
                    ],
                    "guid": "A:FN&>+kpE",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1><div>What type of switching can send multiple packets across the fabric in parallel?<br></div>",
                        "Interconnection Network / Crossbar"
                    ],
                    "guid": "e1X2qyvZud",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>\n  The Challenges Routers Face\n</h2>\n<div>The fundamental problems that a router faces revolve around:<br><ul><li>{{c1::Bandwidth and Internet population scaling}}</li><li>{{c1::Services (that the router needs to perform) at high speeds}}<br></li></ul></div>\n",
                        ""
                    ],
                    "guid": "n?h87*3J!(",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>\n  Prefix-Match Lookups\n</h2>\n<div>The different ways to denote prefix are:</div><div><ul><li>{{c1::Dot decimal}}</li><ul><li>{{c2::Example of the 16-bit prefix: 132.234}}</li></ul><li>{{c1::Slash notation}}</li><ul><li>{{c3::Standard notation: A/L (where A=Address, L=Length)<br>Example: 132.238.0.0/16<br>Here, 16 denotes that only the first 16 bits are relevant for prefixing}}</li></ul><li>{{c1::Masking}}</li><ul><li>{{c4::Example: The prefix 123.234.0.0/16 is written as 123.234.0.0 with a mask 255.255.0.0}}</li></ul></ul></div>",
                        ""
                    ],
                    "guid": "f^,G*wecu,",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>\n  Prefix-Match Lookups</h2><h3>What is the need for variable-length prefixes?</h3><div>In the earlier days of the Internet, we used an IP addressing model based on {{c1::classes (fixed-length prefixes)}}. With the rapid exhaustion of IP addresses, in 1993, the {{c2::Classless Internet Domain Routing (CIDR)}} came into effect. {{c2::CIDR}} essentially assigns IP addresses using {{c3::arbitrary-length prefixes}}. {{c2::CIDR}} has helped to decrease the router table size, but at the same time, it introduced us to a new problem:&nbsp;{{c4::longest-matching-prefix lookup}}.<br></div>",
                        ""
                    ],
                    "guid": "e#?q[C^AM7",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>\n  Prefix-Match Lookups</h2><h3>Why do we need (better) lookup algorithms?</h3><div><ul><li>Measurement studies on network traffic had shown a large number of concurrent flows of short duration. As a consequence, {{c1::caching}} solutions will not work efficiently.</li><li>A large part of the cost of computation for lookup is {{c2::accessing memory}}.</li><li>An unstable routing protocol may adversely impact {{c3::the update time in the table: add, delete or replace a prefix}}.</li><li>A vital trade-off is {{c4::memory usage (fast/expensive vs slower/cheap)}}.</li></ul></div>",
                        ""
                    ],
                    "guid": "c|y/Uk_)w@",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>\n  Prefix-Match Lookups</h2><div>Consider a router with the following forwarding table:</div><table border=\"1\"><tbody><tr><td><strong>Prefix Match</strong></td><td><strong>Output Link</strong></td></tr><tr><td>101*</td><td>A</td></tr><tr><td>111*</td><td>B</td></tr><tr><td>1100 1*</td><td>C</td></tr><tr><td>otherwise</td><td>D</td></tr></tbody></table><div><div>Given that the router uses longest prefix matching. Determine the output link for packet with given destination IP address. Type the letter of the output link.</div><div><ul><li>11100001 10000000 0001 0001 0111 1001: {{c1::B}}</li><li>1111 0001 1111 0000 1010 0001 0111 0111: {{c1::B}}</li><li>1010 1010 1010 1010 1010 1010 1010 1010: {{c1::A}}</li><li>1100 1001 1000 0000 0001 0001 0111 0111: {{c1::C}}</li></ul></div></div>",
                        ""
                    ],
                    "guid": "rB]##Do|y=",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>\n  Prefix-Match Lookups</h2><div>Determine the mask for the address 192.168.0.1/24.</div>",
                        "255.255.255.0"
                    ],
                    "guid": "lstn!^>25@",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>\n  {{c1::Unibit Tries}}\n</h2>\n<div>One of the simplest techniques for prefix lookup is the {{c1::unibit trie}}.<br></div>",
                        "<img src=\"unibitTrie.jpg\">"
                    ],
                    "guid": "gwGaf)sHlY",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>Unibit Tries</h2>\n<div><div>These are the steps we follow to perform a prefix match:</div><ul><li>{{c1::We begin the search for a longest prefix match by tracing the trie path.}}</li><li>{{c1::We continue the search until we fail (no match or an empty pointer)}}</li><li>{{c1::When our search fails, the last known successful prefix traced in the path is our match and our returned value}}</li></ul></div>",
                        "<div><ul><li>If a prefix is a substring of another prefix, the smaller string is stored in the path to the longer (more specific prefix).</li><li>One-way branches. For efficiency, we compress one-way branches to a single text string..</li></ul></div>"
                    ],
                    "guid": "idNVA$!OYI",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<!--\ngraph {\n    0 [label=\"\"];\n    1 [label=\"a\" style=filled color=\"lightblue\"];\n    2 [label=\"b\" style=filled color=\"lightblue\"];\n    3 [label=\"\"];\n    4 [label=\"c\" style=filled color=\"lightblue\"];\n    5 [label=\"d\" style=filled color=\"lightblue\"];\n    6 [label=\"\"];\n    7 [label=\"e\" style=filled color=\"lightblue\"];\n    8 [label=\"f\" style=filled color=\"lightblue\"];\n    9 [label=\"\"];\n    10 [label=\"g\" style=filled color=\"lightblue\"];\n    11 [label=\"h\" style=filled color=\"lightblue\"];\n    \n    0 -- 1 [label=\"0\"];\n    0 -- 2 [label=\"1\"];\n    1 -- 3 [label=\"0\"];\n    1 -- 4 [label=\"1\"];\n    2 -- 5 [label=\"0\"];\n    2 -- 6 [label=\"1\"];\n    3 -- 7 [label=\"0\"];\n    6 -- 8 [label=\"1\"];\n    7 -- 9 [label=\"1\"];\n    9 -- 10 [label=\"0\"];\n    9 -- 11 [label=\"1\"];\n}\n-->\n<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>Unibit Tries</h2>\n<div><div>Consider the following unibittrie. Nodes in blue represents stored prefixes.</div><div><img src=\"unibitTrieQuiz.svg\"><br></div><div>For each prefix look up, determine the node we return.</div></div><div><div><ul><li>&nbsp;0* : {{c1::a}}</li><li>&nbsp;1* :&nbsp; {{c1::b}}</li><li>&nbsp;01* : {{c1::c}}</li><li>00* : {{c2::a}}</li><li>0000* : {{c2::e}}</li><li>00011* : {{c2::h}}</li></ul></div></div>",
                        ""
                    ],
                    "guid": "B@F]v~(U:J",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>Multibit Tries</h2>\n<div>While a&nbsp;<b>unibit trie</b>&nbsp;is very efficient and offers advantages such as fast lookup and easier updates, its most significant&nbsp;problem&nbsp;is {{c1::the number of memory accesses required to perform a lookup}}.<br></div><div>Instead, we can implement lookups using a {{c2::stride}}. The {{c2::stride}} is {{c3::the number of bits that we check at each step}}.<br></div>",
                        ""
                    ],
                    "guid": "jCt:BD=84J",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>{{c1::Multibit Tries}}</h2>\n<div>A {{c1::multibit trie}} is a {{c1::trie}} where each node has {{c2::\\(2^k\\)}}&nbsp;children, where k is the stride.<br></div>",
                        ""
                    ],
                    "guid": "IM7|oc~w>n",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>{{c1::Prefix Expansion}}</h2>\n<div><div>A strategy called&nbsp;{{c1::controlled prefix expansion}}, expands variable sized prefixes to a multiple of the chosen stride length.</div><div>&nbsp;&nbsp;</div><div>For example with a stride size of 3, P3 = 11001* gets expanded to {{c2::110010* and 110011*}}.&nbsp;</div></div>",
                        ""
                    ],
                    "guid": "A!A~RH;rY)",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>Prefix Expansion</h2>\n<div><div>Consider the following prefix database. &nbsp;</div><div><ol><li>P1 &nbsp; =&gt; &nbsp; 101* </li><li>P2 &nbsp; =&gt; &nbsp; 0* </li><li>P3 &nbsp; =&gt; &nbsp; 1* </li><li>P4 &nbsp; =&gt; &nbsp; 10101* </li></ol></div><div>&nbsp;</div><div>Consider expanding each prefix with stride length 3, so that we construct a fixed length multibit trie.&nbsp;</div><div>Which of the following prefixes are associated with P3? Select all that apply.</div></div>",
                        "<ol><li>110*</li><li>10*</li><li>100*</li><li>101*</li><li>001*</li><li>011*</li><li>111*</li></ol>",
                        "<ol><li><span style=\"color: rgb(0, 0, 255);\">110*</span></li><li>10* &lt;- not a valid prefix for a stride lenght of 3</li><li><span style=\"color: rgb(0, 0, 255);\">100*</span></li><li>101* &lt;- covered by P1</li><li>001*</li><li>011*</li><li><span style=\"color: rgb(0, 0, 255);\">111*</span></li></ol>"
                    ],
                    "guid": "sXwTl!}`9@",
                    "note_model_uuid": "0e109998-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson05",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>Multibit tries: Fixed-Stride</h2>\n<div><div>Some key points with fixed-stride tries:</div><ul><li>Every element in a trie represents two pieces of information: {{c1::a pointer}} and {{c1::a prefix value}}.</li><li>The prefix search moves ahead with the preset length in n-bits</li><li>When the path is traced by a pointer, we {{c2::remember the last matched prefix (if any)}}</li><li>Our search ends when {{c3::an empty pointer is met. At that time, we return the last matched prefix as our final prefix match}}</li></ul></div>",
                        ""
                    ],
                    "guid": "o!sjDP1fGj",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>Multibit Tries: Variable Stride</h2>\n<div><div>Some&nbsp;key points&nbsp;about variable stride:</div><ul><li>Every node can have {{c1::a different number of bits to be explored}}.</li><li>The optimizations to the stride length for each node are all done to {{c2::save trie memory and the least memory accesses}}.</li><li>An optimum variable stride is selected by using {{c3::dynamic programming}}</li></ul></div>",
                        ""
                    ],
                    "guid": "B^R:)v4K!-",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<!--\ngraph {\n    n1 -- n2 [label=00]\n    n1 -- n3 [label=01]\n    n1 -- n4 [label=10]\n    n1 -- n5 [label=11]\n    n3 -- n6 [label=00]\n    n3 -- n7 [label=01]\n    n3 -- n8 [label=10]\n    n3 -- n9 [label=11]\n    n4 -- n10 [label=0]\n    n4 -- n11 [label=1]\n    n5 -- n12 [label=00]\n    n5 -- n13 [label=01]\n    n5 -- n14 [label=10]\n    n5 -- n15 [label=11]\n    n6 -- n16 [label=0]\n    n6 -- n17 [label=1]\n}\n-->\n<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>Multibit Tries</h2>\n<div><div>Consider the following prefix database that provides a mapping between nodes (a,b,c,..) and prefixes (eg 0*,1*, etc).</div><div><ul><li>a =&gt; 0*</li><li>b =&gt; 01000*</li><li>c =&gt; 011*</li><li>d =&gt; 1*</li><li>e =&gt; 100*</li><li>f =&gt; 1100*</li><li>g =&gt; 1101*</li><li>h =&gt; 1110*</li><li>i =&gt; 1111*&nbsp;</li></ul></div><div>Construct the following variable-stride multibit trie. Based on the above database, fill in the nodes (eg n1, n2, n3, etc) with the corresponding nodes from the database (a, b, c, etc).</div><img src=\"multibitTrie.svg\"><br></div>\n<table border=\"1\">\n<tbody>\n<tr>\n<td>\n<p>n1: {{c1::none}}</p>\n</td>\n<td>\n<p>n2: {{c1::a}}</p>\n</td>\n<td>\n<p>n3: {{c1::a}}</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>n4: {{c1::d}}</p>\n</td>\n<td>\n<p>n5: {{c1::d}}</p>\n</td>\n<td>\n<p>n6: {{c2::none}}</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>n7: {{c2::none}}</p>\n</td>\n<td>\n<p>n8: {{c2::c}}</p>\n</td>\n<td>\n<p>n9: {{c2::c}}</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>n10: {{c3::e}}</p>\n</td>\n<td>\n<p>n11: {{c3::none}}</p>\n</td>\n<td>\n<p>n12: {{c4::f}}</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>n13: {{c4::g}}</p>\n</td>\n<td>\n<p>n14: {{c4::h}}</p>\n</td>\n<td>\n<p>n15: {{c4::i}}</p>\n</td>\n</tr>\n<tr>\n<td>\n<p>n16: {{c5::b}}</p>\n</td>\n<td>\n<p>n17: {{c5::none}}</p>\n</td>\n<td>&nbsp;</td>\n</tr>\n</tbody>\n</table>",
                        ""
                    ],
                    "guid": "O]4V{X4|sw",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>Multibit Tries</h2>\n<div>A multibit trie is {{c1::shorter}}  than a unibit trie representing the same prefix database and requires {{c1::fewer}} memory accesses to perform a lookup.</div>",
                        ""
                    ],
                    "guid": "EkAcP6MT>7",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 5: Router Design and Algorithms</h1>\n<h2>Multibit Tries</h2>\n<div><div>Multibit tries can support an arbitrary number of prefix lengths.&nbsp;</div><div>T/F?</div></div>",
                        "<div><div><div><div><div><b>False</b></div><br><div></div></div><div></div></div><div></div></div><div></div></div><div><div>To use a given multibit&nbsp;trie, the prefix set must be transformed into an equivalent set with&nbsp;the prefix lengths allowed by the new structure.</div></div>"
                    ],
                    "guid": "lGJ6%}w$f:",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson05",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Name the four major router bottlenecks.",
                        "<div>Lethal Snakes Squeeze Bread</div><ul><li><b>Longest</b> prefix matching</li><li><b>Service</b> differentiation</li><li><b>Switching</b> limitations</li><li><b>Bottlenecks</b> about services</li></ul>"
                    ],
                    "guid": "j:2`<jpxCj",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Why is Longest prefix matching a router bottleneck?",
                        "Algorithms for efficient longest prefix matching are complex."
                    ],
                    "guid": "CXw&>gUbh",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Why is&nbsp;Service differentiation a router bottleneck?",
                        "Quality-of-service (or security guarantees) requires routers to classify packets."
                    ],
                    "guid": "JcczRE2WLF",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Why are Switching limitations a router bottleneck?",
                        "At high speeds even crossbar switching has limitations (e.g., head of line blocking)"
                    ],
                    "guid": "NNvmI/;04[",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Why could delivering services be a router bottleneck?",
                        "Providing performance guarantees (quality of service) at high speeds is nontrivial."
                    ],
                    "guid": "B0@$;e->tR",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                }
            ]
        },
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "0e19223e-a05c-11ed-8334-83f82e164357",
            "deck_config_uuid": "eedb0b70-e5c4-11ea-8fe2-e4a7a0580719",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [],
            "name": "Lesson 06: Router Design and Algorithms",
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Why We Need {{c1::Packet Classification}}?</h2>\n<div>As the Internet becomes increasingly complex, networks require {{c2::quality-of-service}} and {{c2::security}} guarantees for their traffic. Packet forwarding based on the longest prefix matching of destination IP addresses is insufficient. We need to handle packets based on multiple criteria such as {{c3::TCP flags}}, {{c3::source addresses}}, and so on. We refer to this finer packet handling as&nbsp;{{c1::packet classification}}.&nbsp;<br></div>",
                        ""
                    ],
                    "guid": "jjb1=T7YUu",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Why We Need Packet Classification?</h2>\n<div><div>Some examples of packet classification are:</div><ul><li>{{c1::Firewalls}}: {{c2::Routers implement firewalls at the entry and exit points of the network to filter out unwanted traffic or to enforce other security policies}}.</li><li>{{c1::Resource reservation protocols}}: {{c3::For example, DiffServ has been used to reserve bandwidth between a source and a destination}}.</li><li>{{c1::Routing based on traffic type}}: {{c4::Routing based on the specific type of traffic helps avoid delays for time-sensitive applications}}.</li></ul></div>",
                        ""
                    ],
                    "guid": "PD|IRuee:f",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Packet Classification: Simple Solutions</h2>\n<div><div>Before looking into algorithmic solutions to the packet classification problem, let's look at the most straightforward approaches that we have:</div><ul><li>{{c1::Linear Search}}:</li><ul><li>Firewall implementations perform a linear search of the rules database and keep track of the best-match rule.</li></ul><li>{{c1::Caching}}:</li><ul><li>Another approach is to cache the results so that future searches can run faster.</li></ul><li>{{c1::Passing Labels}}:</li><ul><li>The Multiprotocol Label Switching (MPLS) and DiffServ use this technology.&nbsp;</li></ul></ul></div>",
                        ""
                    ],
                    "guid": "q@oHgd~aSO",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Fast Searching Using Set-Pruning Tries</h2>\n<div>The simplest way to approach a two-dimensional rule (e.g. classify packets using both the source and the destination IP addresses) would be to {{c1::build a trie on the destination prefixes in the database, and then for every leaf-node at the destination trie to \"hang\" source tries}}.&nbsp;<br></div>",
                        ""
                    ],
                    "guid": "Lb?=Bq^|_j",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Fast Searching Using Set-Pruning Tries</h2>\n<div>The problem with the set pruning tries is {{c1::memory explosion}}. Because a source prefix {{c2::can occur in multiple destination tries}}.<br></div>",
                        ""
                    ],
                    "guid": "fTQU=)@0JG",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Reducing Memory Using Backtracking</h2>\n<div><div>The backtracking approach has each destination prefix D point to {{c1::a source trie that stores the rules whose destination field is exactly D}}. The search algorithm then performs a \"backtracking\" search on the source tries associated with all ancestors of D.</div><div><br></div><div>The algorithm goes through the destination trie and finds {{c2::the longest destination prefix D matching the header}}. Then it {{c3::works its way back up the destination trie and searches the source trie associated with every ancestor prefix of D that points to a nonempty source trie}}.&nbsp;</div></div>",
                        "Since each rule is stored exactly once, the memory requirements are lower than the previous scheme. But, the lookup cost for backtracking is worse than for set-pruning tries."
                    ],
                    "guid": "lb1AP;r{ZA",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Grid of Tries</h2>\n<div>With the grid of tries approach,&nbsp;we can reduce the wasted time in the backtracking search by using {{c1::precomputation}}. When there is a failure point in&nbsp;a source trie, we&nbsp;{{c2::precompute&nbsp;a&nbsp;switch pointer}}. Switch pointers {{c3::take us directly to the next possible source trie containing a matching rule}}.<br></div>",
                        ""
                    ],
                    "guid": "K|a,@ZOF9;",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Scheduling and Head of Line Blocking</h2>\n<div>In the “{{c1::take-a-ticket}} algorithm”, each output line maintains {{c2::a distributed queue}} for all input lines that want to send packets to it. When an input line intends to send a packet to a specific output line, it {{c3::requests a ticket}}. Then, the input line {{c4::waits for the ticket to be served}}. At that point, {{c5::the input line connects to the output line, the crosspoint is turned on, and the input line sends the packet}}.&nbsp;<br></div>",
                        ""
                    ],
                    "guid": "n`,SA]<M!{",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Scheduling and {{c2::Head of Line Blocking}}</h2>\n<div>The {{c1::take-a-ticket}} algorithm has problem known as&nbsp;{{c2::head-of-line (HOL) blocking}}&nbsp;where {{c3::the entire queue is blocked by the progress of the head of the queue}}.&nbsp;<br></div>",
                        ""
                    ],
                    "guid": "I{Bb.w{F}|",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Avoiding Head of Line Blocking</h2>\n<div>With an N-by-N crossbar switch, we could avoid blocking packets sent to the same output link if {{c1::we have the fabric running N times faster than the input links}}.</div><div><br></div><div>A practical implementation of this approach is {{c2::the Knockout scheme}}. It relies on {{c3::breaking up packets into fixed sizes (cell)}}. In practice, we suppose that {{c4::the same output rarely receives N cells, and the expected number is k (smaller than N)}}. Then we can {{c5::have the fabric running k times as fast as an input link instead of N}}.<br></div>",
                        ""
                    ],
                    "guid": "pQ(wM}/)+l",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1><h2>Avoiding Head of Line Blocking</h2><div>In {{c1::parallel iterative matching}}, we {{c2::break down the single queue into virtual queues, with one virtual queue per output link}}.</div><div><br></div><div><div>The algorithm runs in three rounds:</div><div><ul><li>{{c3::Request phase}}: {{c4::all inputs send requests in&nbsp;parallel&nbsp;to all outputs they want to connect with}}.</li><li>{{c3::Grant phase}}: {{c5::the&nbsp;outputs that receive multiple requests pick a random input.}}</li><li>{{c3::Accept phase}}:&nbsp;{{c6::inputs that receive multiple grants randomly pick an output to send to}}.</li></ul></div></div>",
                        ""
                    ],
                    "guid": "ON<yU)&2-1",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Scheduling Introduction</h2>\n<h3>{{c1::FIFO with tail drop}}:</h3>\n<div>The simplest method of router scheduling is {{c1::FIFO with tail-drop}}. Once packets enter a router on input links, they are looked up using {{c2::the address lookup component}} – which gives the router an output port.This port is a {{c3::FIFO (first-in, first-out) queue}}. If the output link buffer is completely full, {{c4::incoming packets to the tail of the queue are dropped}}.<br></div>",
                        "This results in fast scheduling decisions but a potential loss in important data packets."
                    ],
                    "guid": "A1FS}G!o2:",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Scheduling Introduction</h2>\n<h3>Need for {{c1::Quality of Service (QoS)}}</h3>\n<div>Methods of packet scheduling such as priority, round-robin, etc. are useful in providing {{c1::quality of service (QoS) guarantees}} to a flow of packets on measures such as {{c2::delay}} and {{c2::bandwidth}}. A flow of packets refers to {{c3::a stream of packets that travels the same route from source to destination and requires the same level of service at each intermediate router and gateway}}.<br></div>",
                        "Flows must be identifiable using fields in the packet headers. For example, an internet flow could consist of all packets with either a source or destination port number of 23."
                    ],
                    "guid": "EklT%sdfPn",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Scheduling Introduction</h2>\n<h3>Need for Quality of Service (QoS)</h3>\n<div><div>The reasons to make scheduling decisions more complex than FIFO with tail drop are:</div><ul><li>Router support for {{c1::congestion}}</li><ul><li>While most traffic is based on TCP (which has its own ways to handle congestion), additional router support can improve the throughput of sources by helping handle congestion.</li></ul><li>Fair sharing of {{c2::links among competing flows}}</li><ul><li>If we use FIFO with tail drop, this {{c2::blocks other flows, resulting in important connections on the clients’ end freezing}}.</li></ul><li>Providing {{c3::QoS guarantees}} to flows</li><ul><li>Fair sharing may guarantee {{c4::bandwidth}} or {{c4::delay limits}} to a flow.</li></ul></ul></div>",
                        "Delay through a router for a flow is noticeably important for live video."
                    ],
                    "guid": "Ju5-a3bs{>",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Deficit Round Robin</h2>\n<h3>\n  Bit-by-bit Round Robin\n</h3><div>A round robin scheme at the {{c1::packet}} level could result in some flows {{c2::receiving less bandwidth}}. Doing this at the {{c3::bit}} level would solve that problem, but isn't possible. An imaginary bit-by-bit system can be used to {{c4::calculate the packet-finishing time and send a packet as a whole}}.</div>\n",
                        "For example if flow A has packets twice as large as B. A round robin scheme (selecting a packet from A then B then A...) would give flow A twice as much bandwith."
                    ],
                    "guid": "J]:JA(N7x%",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Deficit Round Robin</h2>\n<h3>\n  Bit-by-bit Round Robin\n</h3><div>The rate of increase in round number is {{c1::inversely proportional}} to the {{c2::number of active flows}}. An important takeaway is that {{c3::the number of rounds required to transmit a packet does not depend on the number of backlogged queues}}.<br></div>\n",
                        ""
                    ],
                    "guid": "Ghs{CV{.v6",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Deficit Round Robin</h2>\n<h3>\n  Packet-level Fair Queuing\n</h3><div>This strategy emulates the bit-by-bit fair queueing by {{c1::sending the packet with the smallest finishing round number}}. At any round, the packet chosen to be sent out is garnered from {{c2::the previous round of the algorithm}}. The packet which {{c3::had been starved the most}} while sending out the previous packet from any queue is chosen</div>\n",
                        ""
                    ],
                    "guid": "CwGn%[6pS%",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Deficit Round Robin</h2>\n<h3>\n  Packet-level Fair Queuing\n</h3><div>Bit-by-bit round-robin gives {{c1::bandwidth}} and {{c1::delay}} guarantees, but the time complexity is too high.<br></div>\n",
                        ""
                    ],
                    "guid": "O?&dajq6v>",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6: Router Design and Algorithms</h1>\n<h2>Deficit Round Robin</h2>\n<h3>\n  Deficit Round Robin (DRR)\n</h3><div>Deficit Round Robin (DRR) assigns {{c1::a quantum size,&nbsp;\\(Q_i\\), and a deficit counter,&nbsp;\\(D_i\\)}}, for each flow. The quantum size determines {{c2::the share of bandwidth allocated to that flow}}. For each turn of round-robin, the algorithm will serve as many packets in the flow <i>i</i> with {{c3::size less than&nbsp;\\(Q_i + D_i\\)}}. If packets remain in the queue, it will {{c4::store the remaining bandwidth in&nbsp;\\(D_i\\)&nbsp;for the next run}}. However, if all packets in the queue are serviced in that turn, it will {{c5::clear&nbsp;\\(D_i\\)&nbsp;to 0 for the next turn}}.<br></div>\n",
                        ""
                    ],
                    "guid": "l>UQgS!3%D",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6</h1>\n<h2>Traffic Scheduling: Token Bucket</h2><h3>Token Bucket Shaping</h3><div>Token bucket shaping can limit the burstiness of a flow by:</div><div><ul><li>limiting the {{c1::average rate (e.g., 100 Kbps)}}</li><li>limiting the {{c1::maximum burst size (e.g., the flow can send a burst of 4KB at a rate of its choice)}}</li></ul></div>\n",
                        ""
                    ],
                    "guid": "i3KZ0P}!iV",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6</h1>\n<h2>Traffic Scheduling: Token Bucket</h2><h3>Token Bucket Shaping</h3><div>The bucket shaping technique assumes a bucket per flow that {{c1::fills with tokens}} with a rate {{c2::R}} per second, and it also can have up to {{c2::B}} tokens at any given time. If the bucket is full with B tokens, additional tokens are {{c3::ignored}}.&nbsp;When a packet arrives, it can go through if {{c4::there are enough tokens (equal to the size of packet in bits)}}. If not, the packet needs to wait until {{c4::enough tokens are in the bucket}}. Given the max size of B, a burst is limited to {{c5::B bits per second}}.&nbsp;</div>\n",
                        ""
                    ],
                    "guid": "hU[JYn+/)y",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6</h1>\n<h2>Traffic Scheduling: Token Bucket</h2><h3>Token Bucket Shaping</h3><div><div>The problem with this technique is that {{c1::we have one queue per flow}}. This is because a flow may have a full token bucket, whereas other flows may have an empty token bucket and, therefore will need to wait.</div><div><br></div><div>We use a modified version of token bucket shaper to {{c2::maintain one queue}}, called {{c3::token bucket policing}}. When a packet arrives will need to have tokens at the bucket already there. If the bucket is empty, {{c4::the packet is dropped}}.</div></div>\n",
                        ""
                    ],
                    "guid": "r->qSCB:x{",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6</h1>\n<h2>Traffic Scheduling: Leaky Bucket</h2><div>The output rate is controlled by identifying traffic descriptor violations and then responding to them in two different ways:<br></div><div><ul><li>Policer:&nbsp;When the traffic rate reaches the maximum configured rate, {{c1::excess traffic is dropped}}, or the packet's setting or \"marking\" is changed. The output rate appears as a saw-toothed wave.</li><li>Shaper:&nbsp;A shaper typically {{c2::retains excess packets in a queue or a buffer}}, and this excess is scheduled for later transmission. The result is that excess traffic {{c3::is delayed instead of dropped}}. Thus, the flow is shaped or smoothed when the data rate is higher than the configured rate.</li></ul></div>\n",
                        "Traffic shaping and policing can work in tandem."
                    ],
                    "guid": "v0lg?4r9p~",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 6</h1>\n<h2>Traffic Scheduling: {{c1::Leaky Bucket}}</h2><div><div>The {{c1::leaky bucket algorithm}} is analogous to water flowing into a {{c1::leaky bucket}}, with the water leaking at a constant rate. It can be used in both traffic policing and traffic shaping. The bucket, say with capacity b, represents {{c2::a buffer that holds packets}}, and the water corresponds to {{c2::the incoming packets}}. The leak rate, r, is {{c3::the rate at which the packets are allowed to enter the network}}, which is constant irrespective of the rate at which packets arrive.<br></div><div><br></div><div>If an arriving packet does not cause an overflow when added to the bucket, it is said to be {{c4::conforming}}. Otherwise, it is said to be {{c4::non-conforming}}. Packets classified as {{c4::conforming}} are {{c5::added to the bucket}}, while {{c4::non-conforming}} packets are {{c5::discarded}}.</div></div>\n",
                        "Irrespective of the input rate of packets, the output rate is constant, which leads to uniform distribution of packets sent to the network. This algorithm can be implemented as a single server queue.&nbsp;"
                    ],
                    "guid": "B|ilyR5nwZ",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson06"
                    ]
                }
            ]
        },
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "0e1ad6c4-a05c-11ed-8334-83f82e164357",
            "deck_config_uuid": "eedb0b70-e5c4-11ea-8fe2-e4a7a0580719",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [
                "34f370c918d248a78abe53276e6a0164-oa-1-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-1-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-10-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-10-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-11-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-11-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-12-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-12-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-13-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-13-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-14-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-14-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-15-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-15-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-16-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-16-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-2-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-2-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-3-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-3-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-4-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-4-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-5-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-5-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-6-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-6-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-7-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-7-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-8-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-8-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-9-A.svg",
                "34f370c918d248a78abe53276e6a0164-oa-9-Q.svg",
                "34f370c918d248a78abe53276e6a0164-oa-O.svg",
                "componentsOfAnSDNController.png"
            ],
            "name": "Lesson 07: SDN",
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>What led us to SDN?</h2><div><div>Software Defined Networking (SDN) arose as part of the process to make computer networks more {{c1::programmable}}. Computer networks are very complex and especially difficult to manage for two main reasons:</div><ul><li>{{c2::Diversity of equipment on the network}}</li><li>{{c2::Proprietary technologies for the equipment}}</li></ul></div>\n",
                        ""
                    ],
                    "guid": "qG_L,c+`|w",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>What led us to SDN?</h2><div>SDN employs a simple idea - {{c1::separation of tasks}}. Like how code becomes {{c2::more modular and easy to manage}} when we divided into smaller functions with focused tasks, SDN divides the network into two planes - {{c3::control plane}} and {{c3::data plane}}.<br></div>\n",
                        ""
                    ],
                    "guid": "wh4(M{89,<",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2><div><div>The history of SDN can be divided into three phases:</div><div><ol><li>{{c1::Active networks}}</li><li>{{c1::Control and data plane separation}}</li><li>{{c1::OpenFlow API and network operating systems}}</li></ol></div></div>\n",
                        ""
                    ],
                    "guid": "y;^#12*bt!",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>\n  {{c1::Active networks}}\n</h3>\n<div>The {{c1::active networks}}&nbsp;phase took place from {{c2::the mid-1990s}} to the {{c2::early 2000s}}.<br></div>\n",
                        ""
                    ],
                    "guid": "G*m>422Cfi",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>Active networks</h3>\n<div>Standardization of new protocols required the {{c1::IETF (Internet Engineering Task Force)::group}}, which was a slow and frustrating process.<br></div>\n",
                        ""
                    ],
                    "guid": "oWcqCcUN.S",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1><h2>A Brief History of SDN: The Milestones</h2><h3>Active networks</h3><div>Active networks aimed at {{c1::opening up network control}}. They envisioned {{c2::a programming interface (a network API)}} that exposed {{c3:: resources/network nodes}} and {{c4::supported customization of functionalities for subsets of packets passing through the network nodes}}. This was the opposite of the popular belief in {{c5::the internet community - the simplicity of the network core was important to the internet success}}!<br></div><br>",
                        ""
                    ],
                    "guid": "v*(F4tZE%a",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>Active networks</h3>\n<div>In the early 1990s, the networking approach was primarily via {{c1::IP or ATM (Asynchronous Transfer Mode)}}. Active networking became one of the first {{c2::‘clean slate’ approaches to network architecture}}.</div>\n",
                        ""
                    ],
                    "guid": "cBq.=@6tVk",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>Active networks</h3>\n<div><div>There were two types of {{c1::programming models}} in active networking. These {{c1::models}} differ based on {{c2::where the code to execute at the nodes was carried}}.</div><ol><li>{{c3::Capsule model}} – {{c4::carried in-band in data packets}}</li><li>{{c3::Programmable router/switch model}} – {{c4::established by out-of-band mechanisms.}}</li></ol></div>\n",
                        ""
                    ],
                    "guid": "B[0+l,.@0~",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>Active networks</h3>\n<div>Although the {{c1::capsule}} model was most closely related to active networking, both models have some effect on the current state of SDNs. By {{c2::carrying the code in data packets}}, {{c1::capsules}} brought {{c3::a new data-plane functionality}} across networks. They also used {{c4::caching}} to make code distribution more efficient.<br></div>\n",
                        ""
                    ],
                    "guid": "Nmtw&_,8?K",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>Active networks</h3>\n<div>{{c1::Programmable routers}} made {{c2::decision making}} a job for {{c3::the network operator}}.<br></div>\n",
                        ""
                    ],
                    "guid": "n_Za#6fP}M",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>Active networks</h3>\n<div><div>The pushes that encouraged active networking were:</div><ul><li>Reduction in {{c1::computation cost}}: Enabled us to put more processing into the network.</li><li>Advancement in {{c1::programming languages}}: For languages like Java, the options of platform portability, code execution safety, and VM (virtual machine) technology to protect the active node in case of misbehaving programs.</li><li>Advances in rapid code {{c1::compilation}} and {{c1::formal}} methods.</li><li>Funding from agencies such as {{c1::DARPA (U.S. Defense Advanced Research Projects Agency)}} for a collection: promoted interoperability among projects.</li></ul></div>\n",
                        ""
                    ],
                    "guid": "nLPlj7$%LT",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>Active networks</h3>\n<div><div>The use pulls for active networking were:</div><ul><li>Network service provider frustration concerning {{c1::the long timeline to develop and deploy new network services}}.</li><li>Third party interests to add value by {{c2::implementing control at a more individualistic nature}}.</li><li>Researchers interest in {{c3::having a network that would support large-scale experimentation}}.</li><li>Unified control over {{c4::middleboxes}}. Active networking envisioned unified control that could replace individually managing these boxes.</li></ul></div>\n",
                        ""
                    ],
                    "guid": "clQ>(Xe#P:",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>Active networks</h3>\n<div><div>In addition to the push and pull use cases, active networks made three major contributions related to SDN:</div><ul><li>{{c1::Programmable functions}} in the network to lower the barrier to innovation.</li><ul><li>While many early visions for SDN concentrated on increasing programmability of the control-plane, active networks focused on the programmability of the data-plane.</li></ul><li>{{c2::Network virtualization}}, and the ability to demultiplex to software programs based on {{c3::packet headers}}.</li><li>The vision of a unified architecture for {{c4::middlebox orchestration}}</li></ul></div>\n",
                        ""
                    ],
                    "guid": "fOE(Y(2*Z;",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>{{c1::Control and data plane separation}}</h3>\n<div><div>The {{c1::Control and data plane separation}}<i>&nbsp;</i>phase lasted from around {{c2::2001}} to {{c2::2007}}.</div></div>\n",
                        ""
                    ],
                    "guid": "u##2T2]R5<",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>Control and data plane separation</h3>\n<div><div>The <b>technology pushes</b> that encouraged control and data plane separation were:<br></div><ul><li>Higher link speeds in backbone networks led vendors to {{c1::implement packet forwarding directly in the hardware, thus separating it from the control-plane software}}.</li><li>Internet Service Providers (ISPs) found it hard to meet the increasing demands for {{c2::greater reliability}} and {{c2::new services (such as virtual private networks)}}, and struggled to {{c3::manage the increased size and scope of their networks}}.</li><li>Servers had substantially more memory and processing resources than those deployed one-two years prior. This meant that a single server could {{c4::store all routing states and compute all routing decisions for a large ISP network}}.</li><li>{{c5::Open source routing software}} lowered the barrier to creating prototype implementations of centralized routing controllers.</li></ul></div>\n",
                        ""
                    ],
                    "guid": "A9LF0KGYo{",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>Control and data plane separation</h3>\n<div><div>The technology pushes inspired two main innovations:</div><ul><li>{{c1::Open interface}} between control and data planes</li><li>{{c2::Logically centralized}} control of the network</li></ul></div>\n",
                        ""
                    ],
                    "guid": "sLicgwK-iR",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>Control and data plane separation</h3>\n<div><div>This phase was different from active networking in several ways:</div><ul><li>It focused on spurring innovation by and for {{c1::network administrators}} rather than {{c1::end users and researchers}}.</li><li>It emphasized programmability in {{c2::the control domain}} rather than {{c2::the data domain}}.</li><li>It worked towards {{c3::network-wide}} {{c4::visibility and control}} rather than {{c3::device-level}} {{c4::configurations}}.</li></ul></div>\n",
                        ""
                    ],
                    "guid": "qC>=LbBy;5",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>Control and data plane separation</h3>\n<div><div>Some use pulls for the separation of control and data planes were:</div><ul><li>Selecting between network paths based on the {{c1::current traffic load}}</li><li>Minimizing disruptions during {{c2::planned routing changes}}</li><li>Redirecting/dropping {{c3::suspected attack traffic}}</li><li>Allowing customer networks more control over {{c4::traffic flow}}</li><li>Offering value-added services for {{c5::virtual private network customers}}</li></ul></div>\n",
                        ""
                    ],
                    "guid": "N#l&FPl=dC",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>Control and data plane separation</h3>\n<div><div>The attempt to separate the control and data planes resulted in a couple of concepts which were used in further SDN design:</div><ul><li>{{c1::Logically centralized control using an open interface to the data plane}}.</li><li>{{c2::Distributed state management}}.</li></ul></div>\n",
                        ""
                    ],
                    "guid": "yKfiuOi:^H",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>{{c1::OpenFlow API and network operating systems}}</h3>\n<div><div>The {{c1::OpenFlow API and network operating systems}}&nbsp;phase took place from around {{c2::2007}} to {{c2::2010}}.</div></div>\n",
                        ""
                    ],
                    "guid": "iXl|Ik%1/K",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>OpenFlow API and network operating systems</h3>\n<div>The basic working of an OpenFlow switch is as follows:</div><div><ul><li>Each switch contains {{c1::a table of packet-handling rules}}.</li><li>Each rule has {{c2::a pattern, list of actions, set of counters and a priority::list 4 components}}.</li><li>When an OpenFlow switch receives a packet, it {{c3::determines the highest priority matching rule, performs the action associated with it and increments the counter::list 3}}.</li></ul></div>\n",
                        ""
                    ],
                    "guid": "ptlrk<z4k~",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>OpenFlow API and network operating systems</h3>\n<h4>Technology push:</h4>\n<div>OpenFlow was adopted in the industry, unlike its predecessors. This could be due to:</div><ul><li>Before OpenFlow, switch chipset vendors had already started to {{c1::allow programmers to control some forwarding behaviors}}.</li><li>This allowed more companies to {{c2::build switches without having to design and fabricate their own data plane}}.</li><li>Early OpenFlow versions built on {{c3::technology that the switches already supported}}. This meant that enabling OpenFlow initially was as simple as {{c4::performing a firmware upgrade}}!</li></ul>",
                        ""
                    ],
                    "guid": "puI}?Yj-k]",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>OpenFlow API and network operating systems</h3>\n<div>\n  Use pulls:</div><div><ul><li>OpenFlow came up to meet the need of {{c1::conducting large scale experimentation on network architectures}}.</li><li>OpenFlow was useful in {{c2::data-center networks}} – there was a need to manage network traffic at large scales.</li><li>Companies started investing more in {{c3::programmers to write control programs}}, and less in {{c3::proprietary switches that could not support new features easily}}.</li></ul></div>",
                        ""
                    ],
                    "guid": "IGAX<A0=[w",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>OpenFlow API and network operating systems</h3>\n<div><div>Some key effects that OpenFlow had were:</div><ul><li>Generalizing {{c1::network devices and functions}}.</li><li>The vision of a {{c2::network operating system}}.</li><li>Distributed {{c3::state management techniques}}.</li></ul></div>",
                        ""
                    ],
                    "guid": "LkL=5>kjT{",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>OpenFlow API and network operating systems</h3>\n<div>The Active Networks phase consisted mainly of creating a {{c1::programming interface that exposed resources/network nodes}} and supported {{c2::customization of functionalities for subsets of packets passing through the network}}.<br></div>",
                        ""
                    ],
                    "guid": "k!>T3u+;zh",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>OpenFlow API and network operating systems</h3>\n<div>One of the main differences between the {{c1::Active Networks}} phase and the {{c1::separation of the Control and Data plane}} phase is that the former is focused on {{c2::device-level configurations}} and the latter is focused on {{c2::network-wide visibility and control}}.</div>",
                        ""
                    ],
                    "guid": "g1mTZB)2p=",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>A Brief History of SDN: The Milestones</h2>\n<h3>OpenFlow API and network operating systems</h3>\n<div>One of the downfalls of OpenFlow when it was first created was that it was hard to deploy and scale it easily.</div><div>T/F?</div>",
                        "False<br>Early OpenFlow versions built on technology that the switches already supported. This meant that enabling OpenFlow initially was as simple as performing a firmware upgrade!"
                    ],
                    "guid": "P2B.m>$U38",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>Why Separate the Data Plane from the Control Plane?</h2>\n<div><div>The reasons we separate the two are:</div><ol><li>{{c1::Independent evolution and development}}</li><ol><li>In the traditional approach, routers are responsible for both routing and forwarding functionalities. This meant that a change to either of the functions would require {{c2::an upgrade of hardware}}. In this new approach, routers only focus on forwarding.</li></ol><li>{{c1::Control from high-level software program}}</li></ol></div>",
                        ""
                    ],
                    "guid": "z*!~/WIBr(",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>Why Separate the Data Plane from the Control Plane?</h2>\n<div><div>This separation leads to opportunities in different areas:</div><div><ol><li>{{c1::Data centers}}.&nbsp;Consider large data centers with thousands of servers and VMs.</li><li>{{c1::Routing}}. With SDN, it is easier to update the router's state, and SDN can provide more control over path selection.&nbsp;</li><li>{{c1::Enterprise networks}}.&nbsp;SDN can improve the security applications for enterprise networks. For example, using SDN it is easier to protect a network from volumetric attacks such as DDoS, if we drop the attack traffic at strategic locations of the network.&nbsp;</li><li>{{c1::Research networks}}.&nbsp;SDN allows research networks to coexist with production networks.</li></ol></div></div>",
                        ""
                    ],
                    "guid": "q7NxT[*q7u",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>Control Plane and Data Plane Separation</h2>\n<div><div>Two important functions of the network layer are:</div><div><ol><li>{{c1::Forwarding}} is a local function for routers, and it usually takes place in {{c2::nanoseconds::timescale}} and is implemented in {{c3::the hardware itself}}.&nbsp;Forwarding is a function of the {{c4::data}} plane. A router looks at the header of an incoming packet and consults {{c5::the forwarding table}}, to determine the outgoing link to send the packet to.&nbsp;</li><li>{{c1::Routing}} involves {{c6::determining the path from the sender to the receiver across the network}}. Routers rely on routing algorithms for this purpose.&nbsp;It is an end-to-end process for networks. It usually takes place in {{c7::seconds::timescale}} and is implemented in {{c8::the software}}.&nbsp;Routing is a function of the {{c9::control}} plane.</li></ol></div></div>",
                        ""
                    ],
                    "guid": "j0unfBOcr-",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>Control Plane and Data Plane Separation</h2>\n<div>In the traditional approach, the routing algorithms (control plane) and forwarding function (data plane) are {{c1::closely}} coupled.<br></div>",
                        "The router runs and participates in the routing algorithms."
                    ],
                    "guid": "H;rhpIq<2K",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>Control Plane and Data Plane Separation</h2>\n<div><div>In the SDN approach, there is a remote controller that {{c1::computes and distributes}} the {{c5::forwarding tables}} to be used by every router. This controller is physically separate from the router. It could be located {{c4::in some remote data center}}, managed by {{c4::the ISP or some other third party}}.</div><div><br></div><div>The routers are solely responsible for {{c2::forwarding}}, and the remote controllers are solely responsible for {{c1::computing and distributing}} the {{c5::forwarding tables}}. The controller is implemented in software, and therefore we say the network is {{c3::software-defined}}.</div></div>",
                        "These software implementations are also increasingly open and publicly available, which speeds up innovation in the field."
                    ],
                    "guid": "I;ClL];-6,",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>The SDN Architecture</h2>\n<div><div>The main components of an SDN network are:&nbsp;</div><ul><li>{{c1::SDN-controlled network elements}}</li><ul><li>Sometimes called the {{c2::infrastructure}} layer, is responsible for {{c3::the forwarding of traffic in a network based on the rules computed by the SDN control plane}}.</li></ul><li>{{c1::SDN controller}}</li><ul><li>A logically centralized entity that acts as an&nbsp;interface between {{c4::the network elements and the network-control applications}}.</li></ul><li>{{c1::Network-control applications}}</li><ul><li>Programs that {{c5::manage the underlying network}} by {{c6::collecting information about the network elements with the help of SDN controller}}.</li></ul></ul></div>",
                        ""
                    ],
                    "guid": "gK;x(7mG:D",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>The SDN Architecture</h2>\n<div><div>The four defining features in an SDN architecture are:</div><div><ol><li>{{c1::Flow-based forwarding}}:&nbsp;The rules for forwarding packets in the SDN-controlled switches can be computed based on {{c2::any number of header field values in various layers such as the transport-layer, network-layer and link-layer}}. OpenFlow allows up to {{c3::11}} header field values to be considered.&nbsp;</li><li>{{c1::Separation of data plane and control plane}}:&nbsp;The SDN-controlled switches execute {{c4::the rules in the flow tables}}. Those rules are computed, installed, and managed by software that runs on {{c5::separate servers::locality}}.&nbsp;</li><li>{{c1::Network control functions}}:&nbsp;The SDN control plane consists of two components: {{c6::the controller}} and {{c6::the network applications}}. The controller {{c7::maintains up-to-date network state information about the network devices and elements}} and provides it to {{c8::the network-control applications}}. This information, in turn, is used by {{c9::the applications to monitor and control the network devices}}.</li><li>{{c1::A programmable network}}:&nbsp;The network-control applications act as {{c10::the “brain” of SDN control plane by managing the network}}.</li></ol></div></div>",
                        ""
                    ],
                    "guid": "l}^eG^[~,7",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>The SDN Architecture</h2>\n<div>In an SDN, the controller is responsible for the {{c1::routing}} of the traffic, and the SDN-controlled network elements such as the switches are responsible for the {{c1::forwarding}} of the traffic.<br></div>",
                        ""
                    ],
                    "guid": "m^oLk[b|hS",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1><h2>The SDN Architecture</h2><div>Which plane do the SDN components belong to?</div><div><ul><li>Network-control applications: {{c1::Control}} plane<br></li><li>SDN controller: {{c1::Control}} plane<br></li><li>SDN-controlled network elements: {{c1::Data}} plane<br></li></ul></div>",
                        ""
                    ],
                    "guid": "Ee*0ub>7?C",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>The SDN Controller Architecture</h2><div>The SDN controller is a part of the SDN {{c1::control}} plane and acts as an interface between {{c2::the network elements}} and {{c2::the network-control applications}}.</div>",
                        ""
                    ],
                    "guid": "Lv:q8ne-yk",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>The SDN Controller Architecture</h2><div><div>An SDN controller can be broadly split into three layers:&nbsp;</div><ul><li>{{c1::Communication}} layer:&nbsp;communicating between {{c2::the controller}} and the {{c2::network elements}}</li><li>{{c1::Network-wide state-management}} layer:&nbsp;{{c3::stores information of network-state}}</li><li>{{c1::Interface to the network-control application}} layer: {{c4::communicating between controller and applications}}</li></ul></div>",
                        ""
                    ],
                    "guid": "jrwTk3FP`w",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>The SDN Controller Architecture</h2><div>{{c1::Communication}} Layer: Devices send {{c2::locally observed events}} to the {{c3::SDN controller}} providing the {{c3::controller}} with {{c4::a current view of the network state}}. The communication between {{c3::SDN controller}} and the controlled devices is known as the “{{c5::southbound}}” interface. {{c6::OpenFlow}} is an example of this protocol, which is broadly used by SDN controllers today.<br></div>",
                        "These events can be a new device joining the network, heartbeat indicating the device is up, etc."
                    ],
                    "guid": "bxSVQw9H|s",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>The SDN Controller Architecture</h2><div>{{c1::Network-wide state-management}} layer: This layer is about {{c2::the network-state}} that is maintained by the controller. The {{c2::network-state}} includes any information about {{c3::the state of the hosts, links, switches and other controlled elements in the network::list 3}}. It also includes {{c4::copies of the flow tables of the switches}}. {{c2::Network-state information}} is needed by {{c5::the SDN control plane}} to configure {{c6::the flow tables}}.<br></div>",
                        ""
                    ],
                    "guid": "kD;;X9p`Ez",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>The SDN Controller Architecture</h2><div>{{c1::The interface to the network-control application}} layer:&nbsp;This layer is also known as the controller’s “{{c2::northbound}}” interface using which the SDN controller interacts with {{c1::network-control applications}}. They can read/write {{c3::network state}} and {{c3::flow tables}} in controller’s {{c4::state-management layer}}. The SDN controller can notify applications of {{c5::changes in the network state}}. A {{c6::REST interface}} is an example of a {{c2::northbound API}}.&nbsp;<br></div>",
                        ""
                    ],
                    "guid": "rOzPi;<d;G",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 7: SDN</h1>\n<h2>The SDN Controller Architecture</h2><div>The SDN controller, although viewed as a monolithic service by external devices and applications, is implemented by {{c1::distributed servers}} to achieve {{c2::fault tolerance, high availability and efficiency::list 3}}. Despite the issues of synchronization across servers, many modern controllers such as {{c3::OpenDayLight}} and {{c3::ONOS}} have solved it and prefer distributed controllers to provide highly scalable services.<br></div>",
                        ""
                    ],
                    "guid": "DVnL#[R1*1",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-1",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\">",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-1-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-1-A.svg\">",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "L`O`dIuiBJ",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-2",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-2-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-2-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "A7!I=-R9XH",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-3",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-3-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-3-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "c<j8Nx/]XX",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-4",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-4-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-4-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "DEq7E1gpS)",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-5",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-5-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-5-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "h)wL]sE`BD",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-6",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-6-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-6-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "uY}w9(%V8C",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-7",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-7-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-7-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "M$xy{E>}.z",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-8",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-8-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-8-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "w,*0`ehfyJ",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-9",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-9-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-9-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "b$z1J#Jt);",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-10",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-10-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-10-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "ycpMhoCOfb",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-11",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-11-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-11-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "bH,Mtwt*6Z",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-12",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-12-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-12-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "K`z5eO9u9,",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-13",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-13-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-13-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "s*GT@xSW</",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-14",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-14-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-14-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "qk2PhK0>~P",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-15",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-15-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-15-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "McYXstA(S4",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "34f370c918d248a78abe53276e6a0164-oa-16",
                        "",
                        "<img src=\"componentsOfAnSDNController.png\">",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-16-Q.svg\" />",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-16-A.svg\" />",
                        "<img src=\"34f370c918d248a78abe53276e6a0164-oa-O.svg\" />"
                    ],
                    "guid": "EMMWk)l3Xv",
                    "note_model_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
                    "tags": [
                        "lecture",
                        "lesson07"
                    ]
                }
            ]
        },
        {
            "__type__": "Deck",
            "children": [],
            "crowdanki_uuid": "0e1cda6e-a05c-11ed-8334-83f82e164357",
            "deck_config_uuid": "eedb0b70-e5c4-11ea-8fe2-e4a7a0580719",
            "desc": "",
            "dyn": 0,
            "extendNew": 0,
            "extendRev": 0,
            "media_files": [
                "RMvGbnenICVq1vzo34hHwn5vFq3FPgVTW9zJPXyKH1N5RIuOSOVFx2YKE01xGuC0i1KY813OJYcGrdT9Y4S_augzJHtEZE-_bq08U6Rk-In5904MECC.png"
            ],
            "name": "Lesson 08: SDN",
            "notes": [
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Revisiting the Motivation for SDN</h2><div><div>As <b>IP networks</b> grew in adoption worldwide, there were a few challenges that became more and more pronounced, such as:</div><ul><li>Handling the ever growing complexity and {{c1::dynamic nature of networks}}: The implementation of network policies required changes right down to {{c2::each individual network device}}, which were often carried out by {{c3::vendor-specific commands}} and required manual configurations.</li><li>{{c1::Tightly coupled}} architecture</li></ul></div>",
                        ""
                    ],
                    "guid": "H#wgL$BfYi",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Revisiting the Motivation for SDN</h2><div>An OpenFlow switch can be instructed by the controller to behave like a {{c1::firewall, switch, router::list 3}}, or even perform other roles like {{c2::load balancer, traffic shaper::list 2}}, etc.<br></div>",
                        ""
                    ],
                    "guid": "M<lsLd=HY=",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Revisiting the Motivation for SDN</h2><div><div>Traditionally viewed, computer networks have three planes of functionality, which are all abstract logical concepts:</div><div><ul><li>{{c1::Data}} plane: These are functions and processes that forward data in the form of packets or frames.</li><li>{{c1::Control}} plane: These refer to functions and processes that determine which path to use by using protocols to populate forwarding tables of data plane elements.</li><li>{{c1::Management}} plane: These are services that are used to monitor and configure the control functionality, e.g. SNMP-based tools.</li></ul></div></div>",
                        ""
                    ],
                    "guid": "A$opokgd,1",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Revisiting the Motivation for SDN</h2><div><div>In software defined networking, every device (switch, router, middlebox, etc.) must be able to make decisions in the forwarding process.</div></div><div>T/F?</div>",
                        "False.<br>The data plane forwards traffic based on the control plane’s decisions."
                    ],
                    "guid": "o}fnP@zA!S",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Revisiting the Motivation for SDN</h2><div>The transition to IPv6 would be faster with a software defined networking paradigm compared to a conventional networking paradigm.<br></div><div>T/F?</div>",
                        "True.<br>In tightly coupled traditional IP networks, new protocol update takes as long as 10 years."
                    ],
                    "guid": "G7H1^2RAMH",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Revisiting the Motivation for SDN</h2><div>The {{c1::management}} plane {{c2::defines}} a network policy.<br></div>",
                        ""
                    ],
                    "guid": "KY+BlB6LKR",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Revisiting the Motivation for SDN</h2><div><div>The {{c1::control}} plane {{c2::enforces}} a network policy.</div></div>",
                        ""
                    ],
                    "guid": "Lb|>.&K5!<",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Revisiting the Motivation for SDN</h2><div><div>The {{c1::data}} plane {{c2::executes}} a network policy.</div></div>",
                        ""
                    ],
                    "guid": "md7T$*Kltc",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Advantages</h2><div><div>In conventional networks, to add a new networking feature, one has to go through the process of {{c1::modifying all control plane devices}} - e.g. installing new firmware / hardware upgrades.&nbsp; To avoid this, traditionally, new specialized equipment was introduced (known as {{c2::middleboxes}}) through which concepts and features such as {{c3::load balancers, intrusion detection systems, firewalls::list 3}}, etc. were introduced. Since these {{c2::middleboxes}} are required to be {{c4::carefully placed in the network topology}}, it is much harder to later change or reconfigure them.</div><br></div>",
                        ""
                    ],
                    "guid": "RiWE!@R)F@",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Advantages</h2><div><div><div>Software-defined networks:&nbsp;Since SDN decouples the control plane from the physical networking devices, it isolates itself as an external entity (SDN controller). With this, middlebox services can be viewed as {{c1::a SDN controller application}}. This approach has several advantages:</div><ol><li>{{c2::Shared abstractions}}:&nbsp;These middlebox services (or network functionalities) can be programmed easily now that the abstractions provided by the control platform and network programming languages can be shared.</li><li>{{c2::Consistency of same network information}}: All network applications have the same global network information view, leading to consistent policy decisions while reusing control plane modules</li><li>{{c2::Locality of functionality placement}}:&nbsp;Previously, the location of middleboxes was a strategic decision and big constraint. However, in this model, the middlebox applications can take actions from anywhere in the network.</li><li>{{c2::Simpler integration}}:&nbsp;Integrations of networking applications are smoother. For example, load balancing and routing applications can be combined sequentially.</li></ol></div><br></div>",
                        ""
                    ],
                    "guid": "x.sApD$@].",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Advantages</h2><div><div>Load balancing is only possible with software defined networking.<br></div><div>T/F?</div></div>",
                        "False.<br>Traditionally, <b>middleboxes</b> implemented features such as load balancers, intrusion detection systems, firewalls."
                    ],
                    "guid": "nQMGeTQ9x-",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Advantages</h2><div><div>In software defined networking, which network application would take precedence when managing incoming traffic?</div><div>Routing Policies or Load Balancing</div></div>",
                        "Load Balancing.<br>Load balancing and routing applications can be combined sequentially."
                    ],
                    "guid": "No=H5B=:1]",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Advantages</h2><div>In conventional networking, {{c1::middleboxes}} would implement an intrusion detection system (IDS).<br></div>",
                        ""
                    ],
                    "guid": "g[pMMQ_..g",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>The SDN Landscape</h2><div><b><span style=\"color: rgb(45, 59, 69); font-weight: 400;\"><img src=\"RMvGbnenICVq1vzo34hHwn5vFq3FPgVTW9zJPXyKH1N5RIuOSOVFx2YKE01xGuC0i1KY813OJYcGrdT9Y4S_augzJHtEZE-_bq08U6Rk-In5904MECC.png\"></span></b><br></div><div>Three perspectives of the SDN landscape:</div><div><ul><li>(a)&nbsp;{{c1::a plane-oriented view}}</li><li>(b)&nbsp;{{c1::the SDN layers}}</li><li>(c)&nbsp;{{c1::a system design perspective}}</li></ul></div>",
                        ""
                    ],
                    "guid": "r0r!8Z8RJx",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>The SDN Landscape</h2><div>Infrastructure: In SDN, the physical networking equipment are merely {{c1::forwarding elements that do a simple forwarding task}}, and any logic to operate them is directed from the {{c2::centralized control system}}. Popular examples of such infrastructure equipment include OpenFlow (software) switches such as {{c3::SwitchLight, Open vSwitch, Pica8::list 3}}, etc.<br></div>",
                        ""
                    ],
                    "guid": "cl^].Byqx;",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>The SDN Landscape</h2><div>Southbound interfaces:&nbsp;These are interfaces that act as {{c1::connecting bridges between control and forwarding elements}}. These APIs are {{c2::tightly coupled}} with the forwarding elements of the underlying physical or virtual infrastructure. The most popular implementation of Southbound APIs for SDNs is {{c3::OpenFlow}}, however there are other APIs proposed such as ForCES, OVSDB, POF, OpFlex, OpenState, etc.<br></div>",
                        ""
                    ],
                    "guid": "q3X?0sh/YB",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>The SDN Landscape</h2><div>{{c1::Network virtualization}}: The network infrastructure needs to provide support for {{c2::arbitrary network topologies and addressing schemes}}. Existing virtualization constructs such as {{c3::VLAN, NAT and MLPS::list 3}} are able to provide full network virtualization, however these technologies are {{c4::connected by a box-by-box basis configuration and there is no unifying abstraction}}. New advancements in SDN network virtualization such as VxLAN, NVGRE, FlowVisor, FlowN, NVP are promising.</div>",
                        "Multiprotocol Label Switching, or MPLS, is&nbsp;a networking technology that routes traffic using the shortest path based on “labels,” rather than network addresses, to handle forwarding over private wide area networks."
                    ],
                    "guid": "O6~4[W{{e%",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>The SDN Landscape</h2><div>Network operating systems: The promise of SDN is to ease network management and solve networking problems by using {{c1::a logically centralized controller}} by way of a network operating system (NOS). The value of a NOS is in providing {{c2::abstractions, essential services, and common APIs to developers::list 3}}.<br></div>",
                        "Some popular NOSs are OpenDayLight, OpenContrail, Onix, Beacon and HP VAN SDN."
                    ],
                    "guid": "h},Hs;QrF9",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>The SDN Landscape</h2><div>Northbound interfaces: Northbound interfaces are supposed to be a mostly {{c1::software ecosystem}}. Another key requirement is the abstraction that {{c2::guarantees programming language and controller independence::list 2}}.</div>",
                        "A standard for Northbound interface is still an open problem, as are its use cases. Some popular examples are Floodlight, Trema, NOX, Onix and SFNet."
                    ],
                    "guid": "kIRQW2Lp#_",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>The SDN Landscape</h2><div>{{c1::Language-based virtualization}}: An important characteristic of {{c1::virtualization}} is the ability to {{c2::express modularity}} and allowing {{c2::different levels of abstraction}}.<br></div>",
                        "Some popular examples of programming languages that support virtualization are Pyretic, libNetVirt, AutoSlice, RadioVisor, OpenVirteX, etc."
                    ],
                    "guid": "jsD!9_3&DY",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>The SDN Landscape</h2><div>Network programming languages: Network programmability can be achieved using {{c1::low-level}} or {{c1::high-level}} programming languages. Using {{c1::low-level}} languages, it is difficult to {{c2::write modular reusable code}}, and it generally leads to {{c3::more error-prone development}}. {{c1::High level}} programming languages in SDNs provide abstractions, make development more modular, code more reusable in control plane, do away with {{c4::device specific and low-level configurations}}, and generally allow faster development.<br></div>",
                        "Some examples of network programming languages in SDNs are Pyretic, Frenetic, Merlin, Nettle, Procera, FML, etc."
                    ],
                    "guid": "DI<`]</%/-",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>The SDN Landscape</h2><div>Network applications:&nbsp;These are the functionalities that implement the {{c1::control}} plane {{c5::logic}} and translate to {{c5::commands}} in the {{c1::data}} plane.</div><div>There is a wide variety of network applications such as:</div><div><ul><li>{{c2::routing}}</li><li>{{c2::load balancing}}</li><li>{{c2::security enforcement}}</li><li>{{c3::end-to-end QoS enforcement}}</li><li>{{c3::power consumption reduction}}</li><li>{{c4::network virtualization}}</li><li>{{c4::mobility management}}</li></ul></div>",
                        "Some well known solutions are Hedera, Aster*x, OSP, OpenQoS, Pronto, Plug-N-Serve, SIMPLE, FAMS, FlowSense, OpenTCP, NetGraph, FortNOX, FlowNAC, VAVE, etc."
                    ],
                    "guid": "f|dHlRQgW3",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>The SDN Landscape</h2><div><div>The northbound interfaces separate the {{c1::management}} plane and {{c1::control}} plane.</div></div>",
                        ""
                    ],
                    "guid": "Qt[.OST7YZ",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>The SDN Landscape</h2><div><div>The <b>southbound</b> interfaces separate the {{c1::data}} plane and {{c1::control}} plane</div></div>",
                        ""
                    ],
                    "guid": "CN?h<[%4|D",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>The SDN Landscape</h2><div>OpenFlow is used in the {{c1::data}} plane, and it is an example of a {{c1::southbound}} interface.<br></div>",
                        ""
                    ],
                    "guid": "g[aY@!bp,N",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Infrastructure Layer</h2><div>OpenFlow is based on a {{c1::pipeline}} of flow tables. Other SDN-enabled forwarding device specifications include {{c2::Protocol-Oblivious Forwarding (POF)}} and {{c2::Negotiable Datapath Models (NDMs)}}.</div>",
                        ""
                    ],
                    "guid": "B_K^&t)$4?",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Infrastructure Layer</h2><div><div>In an OpenFlow device, when a packet arrives, the lookup process starts in {{c1::the first table}} and ends either with {{c1::a match in one of the tables of the pipeline}} or {{c1::with a miss (when no rule is found for that packet)}}. Some possible actions for the packet include:</div><ol><li>{{c2::Forward the packet to outgoing port}}</li><li>{{c2::Encapsulate the packet and forward it to controller}}</li><li>{{c2::Drop the packet}}</li><li>{{c3::Send the packet to normal processing pipeline}}</li><li>{{c3::Send the packet to next flow table}}</li></ol></div>",
                        ""
                    ],
                    "guid": "In,@28TU:G",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Southbound Interfaces</h2><div>From a legacy standpoint, development of a new switch typically takes up to {{c1::two years}} for commercialization. API proposals like OpenFlow promote {{c2::interoperability}} and {{c2::deployment of vendor-agnostic devices}}.<br></div>",
                        ""
                    ],
                    "guid": "Ht3QZXPU4A",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Southbound Interfaces</h2><div><div>There are three information sources provided by OpenFlow protocol:</div><ol><li>{{c1::Event-based messages}} that are sent by forwarding devices to controller when there is a link or port change</li><li>{{c1::Flow statistics}} are generated by forwarding devices and collected by controller</li><li>{{c1::Packet messages}} are sent by forwarding devices to controller when they do not know what to do with a new incoming flow</li></ol></div>",
                        ""
                    ],
                    "guid": "m90Dr*M;3=",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Southbound Interfaces</h2><div>There are others API proposals besides OpenFlow:</div><div><ul><li>{{c1::ForCES}}, provides a more flexible approach to traditional network management without changing the current architecture of the network, i.e, it does not need a logically centralized controller. The control and data planes are separated but potentially can also be kept in the same network element.</li><li>{{c2::OVSDB}} acts complementary to OpenFlow or Open vSwitch. It allows the control elements to create multiple vSwitch instances, set QoS policies on interfaces, attach interfaces to the switches, configure tunnel interfaces on the OpenFlow data paths, manage queues and collect statistics.</li></ul></div>",
                        ""
                    ],
                    "guid": "g)<#=fDMs@",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Southbound Interfaces</h2><div>What action does an OpenFlow device take when an incoming flow does NOT match any rules in any of the flow tables in the pipeline?<br></div>",
                        "Sends a message to the controller"
                    ],
                    "guid": "zW01%t^5Z?",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Southbound Interfaces</h2><div>Which type of message sent by an OpenFlow device to the network OS allows for quality of service (QoS) policies to be implemented?<br></div>",
                        "Flow statistics"
                    ],
                    "guid": "FRFO@/{N``",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Southbound Interfaces</h2><div>Which type of message would be sent by an OpenFlow device to the network OS in when it receives new routing information?<br></div>",
                        "An event-based message"
                    ],
                    "guid": "Ao=|.vV}Mc",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Controllers: Centralized vs Distributed</h2>\n<h3>Core controller functions</h3>\n<div>All controllers should provide base funcionality such as:</div><div><ul><li>{{c1::topology}}</li><li>{{c1::statistics}}</li><li>{{c1::notifications}}</li><li>{{c2::device management}}</li><li>{{c2::shortest path forwarding}}</li><li>{{c2::security mechanisms}}</li></ul></div>",
                        ""
                    ],
                    "guid": "h)XUAtI%bu",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Controllers: Centralized vs Distributed</h2>\n<h3>Core controller functions</h3>\n<div>Security mechanisms are critical components to provide {{c1::basic isolation}} and security enforcements between {{c2::services}} and {{c2::applications}}.<br></div>",
                        ""
                    ],
                    "guid": "cEJG>f_<kG",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Controllers: Centralized vs Distributed</h2>\n<h3>Centralized controllers</h3>\n<div>A single entity that manages all forwarding devices in the network, is {{c1::a single point of failure}} and may have {{c2::scaling issues}}.<br></div>",
                        "Some enterprise class networks and data centers use such architectures, such as Maestro, Beacon, NOX-MT."
                    ],
                    "guid": "B(yI1FOX,H",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Controllers: Centralized vs Distributed</h2>\n<h3>Distributed controllers</h3>\n<div><div>A distributed {{c1::network operating system}} (controller) can be scaled to meet the requirements of {{c2::potentially any environment - small or large networks}}. Distribution can occur in two ways: it can be {{c3::a centralized cluster of nodes}} or {{c3::physically distributed set of elements}}.</div></div>",
                        ""
                    ],
                    "guid": "C~Zf[L5;]:",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Controllers: Centralized vs Distributed</h2>\n<h3>Distributed controllers</h3>\n<div><div>Properties of distributed controllers:</div><ul><li>{{c1::Weak consistency semantics}}</li><li>{{c1::Fault tolerance}}</li></ul></div>",
                        ""
                    ],
                    "guid": "IeO%tzkH8E",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>An example Controller: ONOS</h2>\n<div>ONOS ({{c1::Open Networking Operating System}}) is a {{c2::distributed SDN control platform}}. It aims to provide {{c3::a global view of the network to the applications, scale-out performance, and fault tolerance::list 3}}.<br></div>",
                        "The prototype was built based on Floodlight, an open-source single-instance SDN controller."
                    ],
                    "guid": "y-i}F$^T,Z",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>An example Controller: ONOS</h2>\n<div>The management and sharing of the network state across ONOS {{c1::cluster}} instances is achieved by maintaining a {{c2::global network view}}.</div>",
                        ""
                    ],
                    "guid": "sA$m@CBt|S",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>An example Controller: ONOS</h2>\n<div>To make {{c1::forwarding}} and {{c1::policy}} decisions, the applications consume information from {{c2::the view}} and then {{c2::update these decisions back to the view}}.<br></div>",
                        ""
                    ],
                    "guid": "c/b{JNAHqS",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>An example Controller: ONOS</h2>\n<div>{{c1::Titan}}, a {{c2::graph database}} and {{c1::Cassandra}}, a {{c2::distributed key value store}} are used to implement the view. The applications interact with the network view using the {{c3::Blueprints graph API}}.&nbsp;{{c4::Zookeeper}} is used to maintain the mastership between the switch and the controller.</div>",
                        ""
                    ],
                    "guid": "xo`#K8p5|S",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>An example Controller: ONOS</h2>\n<div>The distributed architecture of ONOS offers {{c1::scale-out performance}} and {{c1::fault tolerance}}. Each ONOS instance serves as {{c2::the master OpenFlow controller}} for {{c3::a group of switches}}. The propagation of state changes between a switch and the network view is handled solely by {{c4::the master instance of that switch}}.</div>",
                        ""
                    ],
                    "guid": "DS#6I3`6-a",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>An example Controller: ONOS</h2>\n<div>To achieve fault tolerance, ONOS redistributes the work of a failed instance to {{c1::other remaining instances}}. Each switch in the network connects to {{c2::multiple ONOS instances with only one instance acting as its master}}. Upon failure of an ONOS instance, {{c3::an election is held on a consensus basis to choose a master for each of the switches that were controlled by the failed instance}}.</div>",
                        ""
                    ],
                    "guid": "cM93Xpts[o",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Controllers: Centralized vs Distributed</h2>\n<div>A network controller prioritizes the rules generated by various services.<br></div><div>T/F?</div>",
                        "True<br>High priority services’ rules should always take precedence over rules created by applications with low priority."
                    ],
                    "guid": "jbAx8h1W*a",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Controllers: Centralized vs Distributed</h2>\n<div>Which architecture provides the best <b>throughput</b>?<br></div>",
                        "A distributed controller with a centralized cluster of nodes."
                    ],
                    "guid": "E)q!$#hHE2",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Controllers: Centralized vs Distributed</h2>\n<div>Which architecture provides the highest level of <b>fault tolerance</b>?<br></div>",
                        "A distributed controller with a physically distributed set of elements."
                    ],
                    "guid": "zR@)cLXswc",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>SDN Controllers: Centralized vs Distributed</h2>\n<div>Which architecture has the strongest <b>consistency</b> semantics?<br></div>",
                        "A centralized controller."
                    ],
                    "guid": "bT>8~YHB%C",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>An example Controller: ONOS</h2>\n<div>How does ONOS handle faults (ONOS instance failure)?<br></div>",
                        "Other instances elect a new master for each of the switches that were previously controlled by the failed instance."
                    ],
                    "guid": "HNdVmT730>",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Programming the Data Plane: The Motivation</h2>\n<div>P4 ({{c1::Programming Protocol-independent Packet Processors}}) is a high-level programming language to {{c2::configure switches}} which works in conjunction with {{c3::SDN control protocols}}. Switch capabilities have grown over the years to include {{c4::multiple stages of the rule tables}} with {{c5::increasing number of header fields}} to allow better exposure of a switch’s functionalities to the controller.&nbsp;<br></div>",
                        ""
                    ],
                    "guid": "CD>}),{!,.",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Programming the Data Plane: The Motivation</h2>\n<div>P4 is used to {{c1::configure the switch programmatically}} and acts as a general interface between the switches and the controller with its main aim of {{c2::allowing the controller to define how the switches operate}}.<br></div>",
                        ""
                    ],
                    "guid": "K/-$LUFgKi",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Programming the Data Plane: The Motivation</h2>\n<div><div>The following are the&nbsp;primary goals of P4:</div><div><ul><li>{{c1::Reconfigurability}}: The way parsing and processing of packets takes place in the switches should be {{c2::modifiable by the controller}}.</li><li>{{c1::Protocol independence}}: The controller defines {{c3::a packet parser}} and {{c3::a set of tables}} mapping matches and their actions. The packet parser {{c4::extracts the header fields}} which are then passed on to {{c5::the match+action tables}} to be processed.&nbsp;</li><li>{{c1::Target independence}}: The packet processing programs should be programmed independent of the underlying target devices. These generalized programs written in P4 should be {{c6::converted into target-dependent programs by a compiler}} which are then used to configure the switch.</li></ul></div></div>",
                        ""
                    ],
                    "guid": "IYdmL~@u*3",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Programming the Data Plane: P4's Forwarding Model</h2>\n<div>The switches using P4 use a {{c1::programmable parser}} and a {{c1::set of match+action tables}} to forward packets. The tables can be accessed in multiple stages in a {{c2::series}} or {{c2::parallel}} manner.<br></div>",
                        ""
                    ],
                    "guid": "it45v9%PaC",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Programming the Data Plane: P4's Forwarding Model</h2>\n<div>P4's programming contrasts with OpenFlow, which supports only {{c1::fixed parsers}} based on {{c1::predetermined header fields}} and only a {{c2::series}} combination of match+actions tables.&nbsp;<br></div>",
                        ""
                    ],
                    "guid": "Otyn4^+(1.",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Programming the Data Plane: P4's Forwarding Model</h2>\n<div><div>The following are the two main operations of the P4 forwarding model:&nbsp;</div><div><ol><li>{{c1::Configure}}: These sets of operations are used to {{c2::program the parser}}. They specify the {{c3::header fields}} to be processed in each {{c3::match+action}} stage and also define the order of these stages.</li><li>{{c1::Populate}}: The entries in the {{c3::match+action}} tables specified during configuration may be altered using the populate operations. It allows {{c4::addition and deletion}} of the entries in the tables.</li></ol></div></div>",
                        ""
                    ],
                    "guid": "dh.k|&}k]Q",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Optional: An introduction To The P4 Programming Language</h2>\n<div><div>P4 is a packet processing language with the following characteristics:&nbsp;&nbsp;</div><ul><li>{{c1::Legal header types}} are declared to let the parser be aware of the possible packet formats.</li><li>A {{c2::control flow program}} which uses the declared header types and a set of actions to specify how the headers are processed.</li><li>{{c3::Table Dependency Graphs (TDGs)}} are used to identify the dependencies between the header fields and help determine the order in which the tables can be executed. Tables with no dependencies may be executed in parallel.</li></ul></div>",
                        ""
                    ],
                    "guid": "sNxeqAAgP9",
                    "note_model_uuid": "eef582ac-e5c4-11ea-8fe2-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "optional"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Programming the Data Plane with P4</h2>\n<div><div>The P4 programming language can also be used with a conventional network paradigm.&nbsp;</div><div>T/F?</div></div>",
                        "False.<br>In conventional networks, the switches are not reprogrammable."
                    ],
                    "guid": "hUz{7i%rSf",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Programming the Data Plane with P4</h2>\n<div><div>The P4 language is being developed as a replacement for OpenFlow.</div></div><div>T/F?</div>",
                        "<div>False</div><div>According to the paper, P4 is a strawman proposal for how OpenFlow should evolve in the future.&nbsp;</div>"
                    ],
                    "guid": "Q.*~Bp*3~$",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": [
                        "lecture",
                        "lesson08",
                        "lesson_quiz"
                    ]
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "<h1>Lesson 8: SDN</h1>\n<h2>Programming the Data Plane with P4</h2>\n<div><div>The P4 language allows programmers to use multiple header fields to parse, match, and perform actions on packets.</div></div><div>T/F?</div>",
=======
                        "T/F<br><br>There may be multiple egress points from an administrative domain to an external destination.",
>>>>>>> Stashed changes
                        "<div>True</div>"
                    ],
                    "guid": "C:CS_&zo{~",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "T/F<br><br>Hot potato routing always selects the egress point that is geographically closest to the ingress point.",
                        "<div>False</div>"
                    ],
                    "guid": "mitT_sdVk;",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "How does Hot potato routing choose its' egress point?",
                        "choosing the closest egress point based on intradomain path cost (Interior Gateway Protocol/IGP cost)."
                    ],
                    "guid": "jrYi4_5$n0",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Link state algorithms use what underlying algorithm?",
                        "Djykstras' algorithm"
                    ],
                    "guid": "ekaZW*Sm&Y",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "The Routing Information Protocol (RIP) is based on the what routing algorithm?",
                        "Distance Vector routing algorithm"
                    ],
                    "guid": "xk)HKGbeN2",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Open Shortest Path First (OSPF) is based on what routing algorithm?",
                        "Linkstate routing algorithm"
                    ],
                    "guid": "oo;[?duo|7",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What causes the Count-to-Infinity Problem in the Distance Vector Routing Algorithm?",
                        "<ul><li>Updates resulting from an <b>increase</b> in link cost <b>travel slowly</b></li><li>Updates resulting from an <b>decrease</b> in link cost <b>travel quickly</b></li></ul>"
                    ],
                    "guid": "Jwce4%}hqC",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What are the key characteristics of the Distance Vector Routing Algorithm?",
                        "<ul><li>Based on the Bellman Ford Algorithm</li><li>The stopping condition is when all nodes stop sending updates to their neighbors</li><li>t's an iterative, asynchronous and distributed algorithm</li></ul>"
                    ],
                    "guid": "o3i/D`a/QV",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What happens during the iterative part of the Linkstate Routing Algorithm?&nbsp;",
                        "<div><ol><li>look at the set of nodes that are NOT included in N’, and we identify the node (say w) with the least cost path from the previous iteration</li><li>We add the node w (that has the least cost path from the previous iteration) into N’</li><li>For every neighbor v of w, we update D(v)</li><li>(cost of the current least cost path from w</li><li>to v)</li></ol></div>"
                    ],
                    "guid": "m1fk3*hRrV",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "In what cases does Poison Reverse solve the Count to Infinity Problem?",
                        "<div>When the problem occurs with 2 nodes<br></div>"
                    ],
                    "guid": "q;%n?K{.p{",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Interdomain routing must involves how many administrative domains?",
                        "<div>multiple administrative domains<br></div>"
                    ],
                    "guid": "rRbKx3_?=p",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "Intradomain routing must involves how many administrative domains?",
                        "<div>one administrative domain<br></div>"
                    ],
                    "guid": "ejhza=rsCI",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What are the main characteristics of Hot Potato routing?",
                        "<ul><li>it effectively reduces the network’s resource consumption by getting the traffic out as soon as possible</li><li>it chooses the closest egress point based on intradomain path cost (Interior Gateway Protocol/IGP cost)</li><li>it's an intradomain routing technique</li></ul>"
                    ],
                    "guid": "hQYu$VQX?v",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "T/F<br><br>Hot Potato routing is an intradomain routing technique.",
                        "<div>True</div>"
                    ],
                    "guid": "zORrcmakAO",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "T/F<br><br>How does Hot Potato routing choose its egress point?",
                        "based on intradomain path cost (Interior Gateway Protocol/IGP cost)"
                    ],
                    "guid": "gW5ep~L*?=",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "T/F<br><br>How does Hot Potato routing reduce the network’s resource consumption?",
                        "getting the traffic out as soon as possible"
                    ],
                    "guid": "D;`x}i<PYI",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What chracteristics do nodes have in the Distance Vector Routing Algorithm?",
                        "<ul><li>A node's distance vector is the vector of cost estimates from itself to all other nodes</li><li>Each node maintains its view of the network in a table</li><li>Nodes only update its direct neighbors when its least-cost path changes</li></ul>"
                    ],
                    "guid": "jB[pFfS0i&",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "In what algorithms does a node maintain its view of the network in a table?",
                        "Distance Vector Routing<br>Link State Routing<br>Djykstras Algorithm"
                    ],
                    "guid": "o.e^}0%M5W",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What happens during the Initialization stage of the Linkstate Routing Algorithm?",
                        "We initialize all the currently known least-cost paths from a source node [$]u[/$] to its directly attached neighbors [$]v[/$]<br>For nodes that are not directly attached to the source node [$]u[/$]&nbsp;, initialize the cost to&nbsp;∞<br>initialize the set&nbsp;N′&nbsp;to include only the source node&nbsp;[$]u[/$]"
                    ],
                    "guid": "f_b&ooB}6v",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What are some characteristics about the Linkstate Routing Algorithm?",
                        "<ul><li>Uses Dijkstra’s algorithm</li><li>The link costs and the network topology are known to ALL nodes</li><li>The goal of the algorithm is to compute the least cost paths from a source node to all other nodes</li></ul>"
                    ],
                    "guid": "q<];fBGWeD",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "In RIP (Routing Information Protocol) how are routing updates exchanged between neighbors?",
                        "By using RIP advertisements with messages"
                    ],
                    "guid": "K{41*P3|[1",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What are some characteristics of a <b>centralized routing algorithm</b>?",
                        "<ul><li>The algorithm computes the least-cost path between a source and destination using <b>complete, global knowledge</b> about the network.</li><li>That is, the algorithm takes the connectivity between all nodes and all link costs as inputs.</li></ul>"
                    ],
                    "guid": "f^mO[%y$6g",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "What are some characteristics of a <b>decentralized routing algorithm?</b>&nbsp;",
                        "<div><ul><li>The calculation of the least-cost path is</li><li>carried out in an iterative, distributed manner by the routers.</li><li>No node has com-plete information about the costs of all network links.</li><li>Each node begins with only the knowledge of the costs of its own directly attached links.</li></ul></div>"
                    ],
                    "guid": "MiYtw%v<7y",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                },
                {
                    "__type__": "Note",
                    "fields": [
                        "In what situation does the poison reverse not work?",
                        "If the count to infinity problem affects three or more nodes."
                    ],
                    "guid": "EbQ^cn5Ph4",
                    "note_model_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
                    "tags": []
                }
            ],
            "reviewLimit": null,
            "reviewLimitToday": null
        }
    ],
    "crowdanki_uuid": "11ad048c-a760-11ed-8af1-a14d95925fac",
    "deck_config_uuid": "11ad2660-a760-11ed-8af1-a14d95925fac",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "buryInterdayLearning": false,
            "crowdanki_uuid": "11ad2660-a760-11ed-8af1-a14d95925fac",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 0,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": true,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    2,
                    0
                ],
                "order": 1,
                "perDay": 200,
                "separate": true
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "replayq": true,
            "rev": {
                "bury": true,
                "ease4": 1.3,
                "fuzz": 0.05,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "minSpace": 1,
                "perDay": 500
            },
            "reviewOrder": 0,
            "timer": 0
        },
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "buryInterdayLearning": false,
            "crowdanki_uuid": "11ad78b8-a760-11ed-8af1-a14d95925fac",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 0,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": true,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    2,
                    0
                ],
                "order": 1,
                "perDay": 200,
                "separate": true
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "replayq": true,
            "rev": {
                "bury": true,
                "ease4": 1.3,
                "fuzz": 0.05,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "minSpace": 1,
                "perDay": 500
            },
            "reviewOrder": 0,
            "timer": 0
        },
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "buryInterdayLearning": false,
            "crowdanki_uuid": "11ae97d4-a760-11ed-8af1-a14d95925fac",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 0,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": true,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    2,
                    0
                ],
                "order": 1,
                "perDay": 200,
                "separate": true
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "replayq": true,
            "rev": {
                "bury": true,
                "ease4": 1.3,
                "fuzz": 0.05,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "minSpace": 1,
                "perDay": 500
            },
            "reviewOrder": 0,
            "timer": 0
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [],
    "name": "GA Tech OMSCS::CS250 Computer Networks",
    "newLimit": null,
    "newLimitToday": null,
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "11adacca-a760-11ed-8af1-a14d95925fac",
            "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: left;\n color: black;\n background-color: white;\n}\n",
            "flds": [
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Front",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": true
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Back",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Add Reverse",
                    "ord": 2,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Basic Quizlet",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ],
                [
                    1,
                    "all",
                    [
                        1,
                        2
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [
                "devops",
                "aws"
            ],
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n\n{{Back}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Normal",
                    "ord": 0,
                    "qfmt": "{{Front}}\n\n"
                },
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n{{Front}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Reverse",
                    "ord": 1,
                    "qfmt": "{{#Add Reverse}}{{Back}}{{/Add Reverse}}"
                }
            ],
            "type": 0,
            "vers": []
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "11adbb66-a760-11ed-8af1-a14d95925fac",
            "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: left;\n color: black;\n background-color: white;\n}\n\n.cloze {\n font-weight: bold;\n color: blue;\n}",
            "flds": [
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Text",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": true
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Extra",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Cloze-352f5",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [
                "devops",
                "aws",
                "cloud"
            ],
            "tmpls": [
                {
                    "afmt": "{{cloze:Text}}<br>\n{{Extra}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Cloze",
                    "ord": 0,
<<<<<<< Updated upstream
                    "qfmt": "{{Deck}}<br><br>\n{{Front}}"
=======
                    "qfmt": "{{cloze:Text}}"
>>>>>>> Stashed changes
                }
            ],
            "type": 1,
            "vers": []
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "11adc3fe-a760-11ed-8af1-a14d95925fac",
            "css": "/* GENERAL CARD STYLE */\n.card {\n  font-family: \"Helvetica LT Std\", Helvetica, Arial, Sans;\n  font-size: 150%;\n  text-align: center;\n  color: black;\n  background-color: white;\n}\n\n/* OCCLUSION CSS START - don't edit this */\n#io-overlay {\n  position:absolute;\n  top:0;\n  width:100%;\n  z-index:3\n}\n\n#io-original {\n  position:relative;\n  top:0;\n  width:100%;\n  z-index:2\n}\n\n#io-wrapper {\n  position:relative;\n  width: 100%;\n}\n/* OCCLUSION CSS END */\n\n/* OTHER STYLES */\n#io-header{\n  font-size: 1.1em;\n  margin-bottom: 0.2em;\n}\n\n#io-footer{\n  max-width: 80%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 0.8em;\n  font-style: italic;\n}\n\n\n#io-extra-wrapper{\n  /* the wrapper is needed to center the\n  left-aligned blocks below it */\n  width: 80%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 0.5em;\n}\n\n#io-extra{\n  text-align:center;\n  display: inline-block;\n}\n\n.io-extra-entry{\n  margin-top: 0.8em;\n  font-size: 0.9em;\n  text-align:left;\n}\n\n.io-field-descr{\n  margin-bottom: 0.2em;\n  font-weight: bold;\n  font-size: 1em;\n}\n\n#io-revl-btn {\n  font-size: 0.5em;\n}\n\n/* ADJUSTMENTS FOR MOBILE DEVICES */\n\n.mobile .card, .mobile #content {\n  font-size: 120%;\n  margin: 0;\n}\n\n.mobile #io-extra-wrapper {\n  width: 95%;\n}\n\n.mobile #io-revl-btn {\n  font-size: 0.8em;\n}\n",
            "flds": [
                {
                    "description": "",
<<<<<<< Updated upstream
                    "font": "Liberation Sans",
                    "media": [],
                    "name": "Header",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": true
                },
                {
                    "description": "",
                    "font": "Liberation Sans",
                    "media": [],
                    "name": "Front",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": true
                },
                {
                    "description": "",
                    "font": "Liberation Sans",
                    "media": [],
                    "name": "Back",
                    "ord": 2,
                    "rtl": false,
                    "size": 20,
                    "sticky": true
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "OMSCS Replace-e9615",
            "req": [
                [
                    0,
                    "any",
                    [
                        0,
                        1
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "<div>{{Deck}}</div>\n<div>{{Header}}</div>\n{{Back}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "<div>{{Deck}}</div>\n<div>{{Header}}</div>\n{{Front}}"
                }
            ],
            "type": 0,
            "vers": []
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "0e1cb2dc-a05c-11ed-8334-83f82e164357",
            "css": "/* GENERAL CARD STYLE */\n.card {\n  font-family: \"Helvetica LT Std\", Helvetica, Arial, Sans;\n  font-size: 150%;\n  text-align: center;\n  color: black;\n  background-color: white;\n}\n\n/* OCCLUSION CSS START - don't edit this */\n#io-overlay {\n  position:absolute;\n  top:0;\n  width:100%;\n  z-index:3\n}\n\n#io-original {\n  position:relative;\n  top:0;\n  width:100%;\n  z-index:2;\n  visibility: hidden;\n}\n\n#io-wrapper {\n  position:relative;\n  width: 100%;\n}\n/* OCCLUSION CSS END */\n\n/* OTHER STYLES */\n#io-header{\n  font-size: 1.1em;\n  margin-bottom: 0.2em;\n}\n\n#io-footer{\n  max-width: 80%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 0.8em;\n  font-style: italic;\n}\n\n#io-extra-wrapper{\n  /* the wrapper is needed to center the\n  left-aligned blocks below it */\n  width: 80%;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 0.5em;\n}\n\n#io-extra{\n  text-align:center;\n  display: inline-block;\n}\n\n.io-extra-entry{\n  margin-top: 0.8em;\n  font-size: 0.9em;\n  text-align:left;\n}\n\n.io-field-descr{\n  margin-bottom: 0.2em;\n  font-weight: bold;\n  font-size: 1em;\n}\n\n#io-revl-btn {\n  font-size: 0.5em;\n}\n\n/* ADJUSTMENTS FOR MOBILE DEVICES */\n\n.mobile .card, .mobile #content {\n  font-size: 120%;\n  margin: 0;\n}\n\n.mobile #io-extra-wrapper {\n  width: 95%;\n}\n\n.mobile #io-revl-btn {\n  font-size: 0.8em;\n}\n",
            "flds": [
                {
                    "description": "",
                    "font": "Liberation Sans",
=======
                    "font": "Arial",
>>>>>>> Stashed changes
                    "media": [],
                    "name": "ID (hidden)",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Header",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Image",
                    "ord": 2,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Question Mask",
                    "ord": 3,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Footer",
                    "ord": 4,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Remarks",
                    "ord": 5,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Sources",
                    "ord": 6,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Extra 1",
                    "ord": 7,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Extra 2",
                    "ord": 8,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Answer Mask",
                    "ord": 9,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Original Mask",
                    "ord": 10,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
<<<<<<< Updated upstream
            "name": "Image Occlusion Enhanced-57578",
=======
            "name": "Image Occlusion Enhanced-243fc",
>>>>>>> Stashed changes
            "req": [
                [
                    0,
                    "any",
                    [
                        2
                    ]
                ]
            ],
            "sortf": 1,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "\n{{#Image}}\n<script>\n  // Toggle answer mask on clicking the image\n  var toggle = function() {\n    var amask = document.getElementById('io-overlay');\n    if (amask.style.display === 'block' || amask.style.display === '')\n      amask.style.display = 'none';\n    else\n      amask.style.display = 'block'\n  }\n</script>\n<div id=\"io-header\">{{Header}}</div>\n<div id=\"io-wrapper\">\n  <div id=\"io-overlay\">{{Answer Mask}}</div>\n  <div id=\"io-original\">{{Image}}</div>\n</div>\n{{#Footer}}<div id=\"io-footer\">{{Footer}}</div>{{/Footer}}\n<button id=\"io-revl-btn\" onclick=\"toggle();\">Toggle Masks</button>\n<div id=\"io-extra-wrapper\">\n  <div id=\"io-extra\">\n    {{#Remarks}}\n      <div class=\"io-extra-entry\">\n        <div class=\"io-field-descr\">Remarks</div>{{Remarks}}\n      </div>\n    {{/Remarks}}\n    {{#Sources}}\n      <div class=\"io-extra-entry\">\n        <div class=\"io-field-descr\">Sources</div>{{Sources}}\n      </div>\n    {{/Sources}}\n    {{#Extra 1}}\n      <div class=\"io-extra-entry\">\n        <div class=\"io-field-descr\">Extra 1</div>{{Extra 1}}\n      </div>\n    {{/Extra 1}}\n    {{#Extra 2}}\n      <div class=\"io-extra-entry\">\n        <div class=\"io-field-descr\">Extra 2</div>{{Extra 2}}\n      </div>\n    {{/Extra 2}}\n  </div>\n</div>\n{{/Image}}\n",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "IO Card",
                    "ord": 0,
                    "qfmt": "{{#Image}}\n<div id=\"io-header\">{{Header}}</div>\n<div id=\"io-wrapper\">\n  <div id=\"io-overlay\">{{Question Mask}}</div>\n  <div id=\"io-original\">{{Image}}</div>\n</div>\n<div id=\"io-footer\">{{Footer}}</div>\n{{/Image}}\n"
                }
            ],
            "type": 0,
            "vers": []
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "94d029ea-7628-11eb-b3ff-e4a7a0580719",
            "css": ".card {\n  font-family: arial;\n  font-size: 20px;\n  text-align: center;\n  color: black;\n  background-color: white;\n}\n\n.cloze {\n  font-weight: bold;\n  color: blue;\n}\n\n.nightMode .cloze {\n  color: lightblue;\n}\n\nul,\nol {\n  display: inline-block;\n  text-align: left; \n}\n\ntable, th, td {\n  border: 1px solid black;\n  border-collapse: collapse;\n}\n\ntd[colspan]:not([colspan=\"1\"]) {\n    text-align: center;\n}\n\ncode {\n  display: inline-block;\n  white-space: pre;\n  text-align: left;\n  tab-size: 3;\n  background: rgba(7,7,7,0.2);\n}\n",
            "flds": [
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Front",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": true
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Back",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": true
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "OMSCS Basic",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [
                "practice_exam"
            ],
            "tmpls": [
                {
                    "afmt": "{{Back}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "{{Front}}"
                }
            ],
            "type": 0,
            "vers": []
        }
    ],
    "notes": [],
    "reviewLimit": null,
    "reviewLimitToday": null
}